; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_flushbuf.o --depend=.\Obj\_fs_flushbuf.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_flushbuf.crf FlashFS\_fs_flushbuf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  __flushbuf PROC
;;;15     
;;;16     int __flushbuf (int handle) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;17       /* Low level file flush function. */
;;;18       FALLOC alloc;
;;;19       IOB *fcb;
;;;20     
;;;21       START_LOCK (int);
000004  481f              LDR      r0,|L1.132|
000006  f7fffffe          BL       _mutex_acquire
;;;22     
;;;23       fcb = &_iob[handle];
00000a  eb040084          ADD      r0,r4,r4,LSL #2
00000e  491e              LDR      r1,|L1.136|
000010  eb0000c4          ADD      r0,r0,r4,LSL #3
000014  eb010480          ADD      r4,r1,r0,LSL #2
;;;24       if (!(fcb->flags & _IOWRT)) {
000018  8860              LDRH     r0,[r4,#2]
00001a  0781              LSLS     r1,r0,#30
00001c  d405              BMI      |L1.42|
;;;25         /* File not opened for write */
;;;26         fcb->flags |= _IOERR;
00001e  f0400010          ORR      r0,r0,#0x10
000022  8060              STRH     r0,[r4,#2]
;;;27         RETURN (-1);
000024  f04f34ff          MOV      r4,#0xffffffff
000028  e026              B        |L1.120|
                  |L1.42|
;;;28       }
;;;29       if (fcb->drive == DRV_MCARD) {
00002a  7921              LDRB     r1,[r4,#4]
00002c  2904              CMP      r1,#4
00002e  d022              BEQ      |L1.118|
;;;30         RETURN (0);
;;;31       }
;;;32       if (fcb->flags & _IOWALLOC) {
000030  0680              LSLS     r0,r0,#26
000032  d520              BPL      |L1.118|
;;;33         /* buffer present and buffered I/O requested */
;;;34         alloc.end    = fcb->_fbot;
000034  6960              LDR      r0,[r4,#0x14]
;;;35         alloc.fileID = fcb->fileID;
000036  9000              STR      r0,[sp,#0]
000038  8820              LDRH     r0,[r4,#0]
00003a  f8ad0004          STRH     r0,[sp,#4]
;;;36         alloc.index  = fcb->_fidx++;
00003e  8a60              LDRH     r0,[r4,#0x12]
000040  f8ad0006          STRH     r0,[sp,#6]
000044  1c40              ADDS     r0,r0,#1
000046  8260              STRH     r0,[r4,#0x12]
;;;37         fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fcb->_fblock].bStart + fcb->_ftop,
000048  8a21              LDRH     r1,[r4,#0x10]
00004a  68e0              LDR      r0,[r4,#0xc]
00004c  4623              MOV      r3,r4
00004e  2208              MOVS     r2,#8
000050  f8500031          LDR      r0,[r0,r1,LSL #3]
000054  69a1              LDR      r1,[r4,#0x18]
000056  4408              ADD      r0,r0,r1
000058  4669              MOV      r1,sp
00005a  f7fffffe          BL       fs_WriteBlock
;;;38                        &alloc, sizeof (FALLOC), fcb);
;;;39         /* Always write on 4-byte boundaries. */
;;;40         fcb->_ftop -= sizeof (FALLOC);
00005e  69a0              LDR      r0,[r4,#0x18]
000060  3808              SUBS     r0,r0,#8
;;;41         fcb->_fbot = (fcb->_fbot + 3) & ~3;
000062  61a0              STR      r0,[r4,#0x18]
000064  6960              LDR      r0,[r4,#0x14]
000066  1cc0              ADDS     r0,r0,#3
000068  f0200003          BIC      r0,r0,#3
;;;42         fcb->flags &= ~_IOWALLOC;
00006c  6160              STR      r0,[r4,#0x14]
00006e  8860              LDRH     r0,[r4,#2]
000070  f0200020          BIC      r0,r0,#0x20
000074  8060              STRH     r0,[r4,#2]
                  |L1.118|
;;;43       }
;;;44       RETURN (0);
000076  2400              MOVS     r4,#0
                  |L1.120|
;;;45     
;;;46       END_LOCK;
000078  4802              LDR      r0,|L1.132|
00007a  f7fffffe          BL       _mutex_release
00007e  4620              MOV      r0,r4
;;;47     }
000080  bd1c              POP      {r2-r4,pc}
;;;48     
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      _stream_list_lock
                  |L1.136|
                          DCD      _iob
