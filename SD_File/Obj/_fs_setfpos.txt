; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_setfpos.o --depend=.\Obj\_fs_setfpos.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_setfpos.crf FlashFS\_fs_setfpos.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  __setfpos PROC
;;;15     
;;;16     int __setfpos (int handle, U32 pos) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4604              MOV      r4,r0
000006  468b              MOV      r11,r1
;;;17       /* Low level Set file position pointer function. */
;;;18       FALLOC fa;
;;;19       IOB *fcb;
;;;20       U32 bl,adr,fidx,prev;
;;;21       U32 i,fpos;
;;;22     
;;;23       START_LOCK (int);
000008  4837              LDR      r0,|L1.232|
00000a  f7fffffe          BL       _mutex_acquire
;;;24     
;;;25       fcb  = &_iob[handle];
00000e  eb040084          ADD      r0,r4,r4,LSL #2
000012  4936              LDR      r1,|L1.236|
000014  eb0000c4          ADD      r0,r0,r4,LSL #3
000018  eb010480          ADD      r4,r1,r0,LSL #2
;;;26       if (fcb->drive == DRV_MCARD) {
;;;27         if (fat_set_fpos (fcb, pos) == __TRUE) {
;;;28           /* File Position indicator changed. */
;;;29           RETURN (0);
;;;30         }
;;;31         RETURN (-1);
00001c  f04f3aff          MOV      r10,#0xffffffff
000020  7920              LDRB     r0,[r4,#4]            ;26
000022  2804              CMP      r0,#4                 ;26
000024  d00d              BEQ      |L1.66|
;;;32       }
;;;33       if (fcb->flags & _IOWRT) {
000026  8860              LDRH     r0,[r4,#2]
000028  0781              LSLS     r1,r0,#30
00002a  d511              BPL      |L1.80|
;;;34         if ((fcb->flags & _IOAPPEND) && (fcb->fsize == pos)) {
00002c  0740              LSLS     r0,r0,#29
00002e  d553              BPL      |L1.216|
000030  6ae1              LDR      r1,[r4,#0x2c]
000032  4559              CMP      r1,r11
000034  d150              BNE      |L1.216|
;;;35           if (fs_AllocBlock (fcb) == __TRUE) {
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       fs_AllocBlock
                  |L1.60|
00003c  2801              CMP      r0,#1                 ;27
00003e  d005              BEQ      |L1.76|
000040  e04a              B        |L1.216|
                  |L1.66|
000042  4659              MOV      r1,r11                ;27
000044  4620              MOV      r0,r4                 ;27
000046  f7fffffe          BL       fat_set_fpos
00004a  e7f7              B        |L1.60|
                  |L1.76|
;;;36             RETURN (0);
00004c  2400              MOVS     r4,#0
00004e  e044              B        |L1.218|
                  |L1.80|
;;;37           }
;;;38         }
;;;39         RETURN (-1);
;;;40       }
;;;41     
;;;42       fidx = 0;
000050  2600              MOVS     r6,#0
;;;43       fpos = 0;
;;;44       bl = fcb->_fblock;
000052  8a25              LDRH     r5,[r4,#0x10]
000054  46b1              MOV      r9,r6                 ;43
                  |L1.86|
;;;45     nextbl:
;;;46       for (i = 0; i < fcb->NumSect; i++) {
000056  2700              MOVS     r7,#0
000058  e03b              B        |L1.210|
                  |L1.90|
;;;47         /* Search for file blocks identified with identification 'fileID' */
;;;48         adr = fs_adr_sig (bl, fcb);
00005a  4621              MOV      r1,r4
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       fs_adr_sig
;;;49         adr = fs_rd_sig (adr, &fa.end);
000062  4669              MOV      r1,sp
000064  f7fffffe          BL       fs_rd_sig
;;;50         if (fa.end != fcb->InitVal) {
000068  9900              LDR      r1,[sp,#0]
00006a  68a2              LDR      r2,[r4,#8]
00006c  4291              CMP      r1,r2
00006e  d02a              BEQ      |L1.198|
;;;51           for (prev = 0; ; prev = fa.end) {
000070  2100              MOVS     r1,#0
000072  e01e              B        |L1.178|
                  |L1.116|
;;;52             adr = fs_rd_alloc (adr, &fa);
;;;53             if (fa.fileID == fcb->fileID  &&  fa.index == fidx) {
000074  f8bd1006          LDRH     r1,[sp,#6]
000078  42b1              CMP      r1,r6
00007a  d116              BNE      |L1.170|
;;;54               /* All file blocks are 4-byte aligned. */
;;;55               prev = (prev + 3) & ~3;
00007c  f1080003          ADD      r0,r8,#3
;;;56               fidx++; 
;;;57               if (fpos + (fa.end - prev) < pos) {
000080  9900              LDR      r1,[sp,#0]
000082  f0200003          BIC      r0,r0,#3              ;55
000086  1a0a              SUBS     r2,r1,r0
000088  eb020109          ADD      r1,r2,r9
00008c  1c76              ADDS     r6,r6,#1              ;56
00008e  465a              MOV      r2,r11
000090  4559              CMP      r1,r11
000092  d201              BCS      |L1.152|
;;;58                 /* Go and try next File Block */
;;;59                 fpos += (fa.end - prev);
000094  4689              MOV      r9,r1
;;;60                 goto nextbl; 
000096  e7de              B        |L1.86|
                  |L1.152|
;;;61               }
;;;62     
;;;63               /* OK, the right File Block Index is found */
;;;64               fcb->_fblock = bl;
000098  8225              STRH     r5,[r4,#0x10]
;;;65               fcb->_fidx = fidx;
;;;66               /* File opened for read. */
;;;67               fcb->_fbot = prev + pos - fpos;
00009a  1881              ADDS     r1,r0,r2
00009c  8266              STRH     r6,[r4,#0x12]         ;65
00009e  eba10009          SUB      r0,r1,r9
;;;68               fcb->_ftop = fa.end;
0000a2  6160              STR      r0,[r4,#0x14]
0000a4  9800              LDR      r0,[sp,#0]
;;;69               RETURN (0);
0000a6  61a0              STR      r0,[r4,#0x18]
0000a8  e7d0              B        |L1.76|
                  |L1.170|
;;;70             }
;;;71             if (fa.end == fcb->InitVal) break;
0000aa  9900              LDR      r1,[sp,#0]
0000ac  68a2              LDR      r2,[r4,#8]
0000ae  4291              CMP      r1,r2
0000b0  d009              BEQ      |L1.198|
                  |L1.178|
0000b2  4688              MOV      r8,r1                 ;51
0000b4  4669              MOV      r1,sp                 ;52
0000b6  f7fffffe          BL       fs_rd_alloc
0000ba  f8bd1004          LDRH     r1,[sp,#4]            ;53
0000be  8822              LDRH     r2,[r4,#0]            ;53
0000c0  4291              CMP      r1,r2                 ;53
0000c2  d1f2              BNE      |L1.170|
0000c4  e7d6              B        |L1.116|
                  |L1.198|
;;;72           }
;;;73         }
;;;74         if (++bl == fcb->NumSect) {
0000c6  88e0              LDRH     r0,[r4,#6]
0000c8  1c6d              ADDS     r5,r5,#1
0000ca  4285              CMP      r5,r0
0000cc  d100              BNE      |L1.208|
;;;75           bl = 0;
0000ce  2500              MOVS     r5,#0
                  |L1.208|
0000d0  1c7f              ADDS     r7,r7,#1              ;46
                  |L1.210|
0000d2  88e0              LDRH     r0,[r4,#6]            ;46
0000d4  42b8              CMP      r0,r7                 ;46
0000d6  d8c0              BHI      |L1.90|
                  |L1.216|
;;;76         }
;;;77       }
;;;78       RETURN (-1);
0000d8  4654              MOV      r4,r10
                  |L1.218|
;;;79     
;;;80       END_LOCK;
0000da  4803              LDR      r0,|L1.232|
0000dc  f7fffffe          BL       _mutex_release
0000e0  4620              MOV      r0,r4
;;;81     }
0000e2  e8bd9ffc          POP      {r2-r12,pc}
;;;82     
                          ENDP

0000e6  0000              DCW      0x0000
                  |L1.232|
                          DCD      _stream_list_lock
                  |L1.236|
                          DCD      _iob
