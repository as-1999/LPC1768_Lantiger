; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_ffind.o --depend=.\Obj\_fs_ffind.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_ffind.crf FlashFS\_fs_ffind.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ffind PROC
;;;15     
;;;16     BOOL _ffind (FINFO *info, IOB *fcb) {
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;17       /* Low level file find function. Searches for the file with next file ID. */
;;;18       FALLOC fa;
;;;19       U32 bl,adr,fid,prev,name = 0;
000004  f04f0800          MOV      r8,#0
;;;20     
;;;21       fid = 0xFFFF;
000008  f64f7aff          MOV      r10,#0xffff
00000c  4604              MOV      r4,r0                 ;16
00000e  460e              MOV      r6,r1                 ;16
000010  4655              MOV      r5,r10
;;;22       for (bl = 0; bl < fcb->NumSect; bl++) {
000012  4647              MOV      r7,r8
000014  e02a              B        |L1.108|
                  |L1.22|
;;;23         /* Search all allocated File Blocks for file with next fileID */
;;;24         adr = fs_adr_sig (bl, fcb);
000016  4631              MOV      r1,r6
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       fs_adr_sig
;;;25         adr = fs_rd_sig (adr, &fa.end);
00001e  4669              MOV      r1,sp
000020  f7fffffe          BL       fs_rd_sig
000024  4602              MOV      r2,r0
;;;26         if (fa.end != fcb->InitVal) {
000026  9800              LDR      r0,[sp,#0]
000028  68b1              LDR      r1,[r6,#8]
00002a  4288              CMP      r0,r1
00002c  d01d              BEQ      |L1.106|
;;;27           for (prev = 0; ; prev = fa.end) {
00002e  2000              MOVS     r0,#0
000030  e010              B        |L1.84|
;;;28             adr = fs_rd_alloc (adr, &fa);
;;;29             if (fa.fileID < fid && fa.fileID > (info->fileID | 0x8000)) {
000032  bf00              NOP      
                  |L1.52|
000034  f8b41104          LDRH     r1,[r4,#0x104]
000038  f4414100          ORR      r1,r1,#0x8000
00003c  4288              CMP      r0,r1
00003e  d905              BLS      |L1.76|
;;;30               fid  = fa.fileID;
000040  4605              MOV      r5,r0
;;;31               name = ((DEVCONF *)fcb->DevCfg)[bl].bStart + prev;
000042  68f0              LDR      r0,[r6,#0xc]
000044  f8501037          LDR      r1,[r0,r7,LSL #3]
000048  eb010809          ADD      r8,r1,r9
                  |L1.76|
;;;32             }
;;;33             if (fa.end == fcb->InitVal) break;
00004c  9800              LDR      r0,[sp,#0]
00004e  68b1              LDR      r1,[r6,#8]
000050  4288              CMP      r0,r1
000052  d00a              BEQ      |L1.106|
                  |L1.84|
000054  4681              MOV      r9,r0                 ;27
000056  4669              MOV      r1,sp                 ;28
000058  4610              MOV      r0,r2                 ;28
00005a  f7fffffe          BL       fs_rd_alloc
00005e  4602              MOV      r2,r0                 ;28
000060  f8bd0004          LDRH     r0,[sp,#4]            ;29
000064  42a8              CMP      r0,r5                 ;29
000066  d2f1              BCS      |L1.76|
000068  e7e4              B        |L1.52|
                  |L1.106|
00006a  1c7f              ADDS     r7,r7,#1              ;22
                  |L1.108|
00006c  88f0              LDRH     r0,[r6,#6]            ;22
00006e  42b8              CMP      r0,r7                 ;22
000070  d8d1              BHI      |L1.22|
;;;34           }
;;;35         }
;;;36       }
;;;37       if (fid != 0xFFFF) {
000072  4555              CMP      r5,r10
000074  d026              BEQ      |L1.196|
;;;38         /* Filename is stored 4-byte aligned. */
;;;39         name = (name + 3) & ~3;
;;;40         /* Copy name to buffer. */
;;;41         if (fcb->drive == DRV_SPI) {
000076  7931              LDRB     r1,[r6,#4]
000078  f1080003          ADD      r0,r8,#3              ;39
00007c  2902              CMP      r1,#2
00007e  f0200003          BIC      r0,r0,#3              ;39
;;;42           fs_spi_ReadData (name, 32, (U8 *)&info->name);
;;;43         }
;;;44         else {
;;;45           fs_ReadData (name, 32, (U8 *)&info->name);
000082  4622              MOV      r2,r4
000084  f04f0120          MOV      r1,#0x20
000088  d019              BEQ      |L1.190|
00008a  f7fffffe          BL       fs_ReadData
;;;46         }
;;;47         info->fileID = fid & 0x7FFF;
00008e  bf00              NOP      
                  |L1.144|
000090  f5047482          ADD      r4,r4,#0x104
000094  f3c5000e          UBFX     r0,r5,#0,#15
000098  8020              STRH     r0,[r4,#0]
;;;48         /* Currently Embedded Files do not support Time information. */
;;;49         info->time.hr  = 12;
00009a  f04f000c          MOV      r0,#0xc
00009e  7120              STRB     r0,[r4,#4]
;;;50         info->time.min = 0;
0000a0  f04f0000          MOV      r0,#0
0000a4  7160              STRB     r0,[r4,#5]
;;;51         info->time.sec = 0;
0000a6  71a0              STRB     r0,[r4,#6]
;;;52         info->time.day = 1;
0000a8  f04f0001          MOV      r0,#1
0000ac  71e0              STRB     r0,[r4,#7]
;;;53         info->time.mon = 1;
0000ae  7220              STRB     r0,[r4,#8]
;;;54         info->time.year= 1980;
0000b0  f24070bc          MOV      r0,#0x7bc
0000b4  8160              STRH     r0,[r4,#0xa]
;;;55         return (__TRUE);
0000b6  f04f0001          MOV      r0,#1
                  |L1.186|
;;;56       }
;;;57       return (__FALSE);
;;;58     }
0000ba  e8bd87fc          POP      {r2-r10,pc}
                  |L1.190|
0000be  f7fffffe          BL       fs_spi_ReadData
0000c2  e7e5              B        |L1.144|
                  |L1.196|
0000c4  2000              MOVS     r0,#0                 ;57
0000c6  e7f8              B        |L1.186|
;;;59     
                          ENDP

