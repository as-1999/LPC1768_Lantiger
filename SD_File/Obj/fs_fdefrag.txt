; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\fs_fdefrag.o --depend=.\Obj\fs_fdefrag.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\fs_fdefrag.crf FlashFS\fs_fdefrag.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delete_file PROC
;;;356    
;;;357    static void delete_file (IOB *fcb, BOOL del_temp) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;358      /* Low level file delete function. */
;;;359      FALLOC fa;
;;;360      U32 bl,adr,invalid;
;;;361    
;;;362      for (bl = 0; bl < fcb->NumSect; bl++) {
000008  2500              MOVS     r5,#0
00000a  e03e              B        |L1.138|
                  |L1.12|
;;;363        /* Search for file blocks identified with identification 'fileID' */
;;;364        adr = fs_adr_sig (bl, fcb);
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       fs_adr_sig
;;;365        adr = fs_rd_sig (adr, &fa.end);
000014  4669              MOV      r1,sp
000016  f7fffffe          BL       fs_rd_sig
00001a  4606              MOV      r6,r0
;;;366        if (del_temp == __FALSE) {
00001c  b33f              CBZ      r7,|L1.110|
;;;367          if (fa.end == fcb->InitVal || fa.end == (fcb->InitVal ^ BlockTEMP)) {
;;;368            /* Skip free or temp Flash Blocks. */
;;;369            continue;
;;;370          }
;;;371        }
;;;372        else {
;;;373          if (fa.end != (fcb->InitVal ^ BlockTEMP)) {
00001e  68a1              LDR      r1,[r4,#8]
000020  9800              LDR      r0,[sp,#0]
000022  f0810103          EOR      r1,r1,#3
000026  4288              CMP      r0,r1
000028  d12e              BNE      |L1.136|
                  |L1.42|
;;;374            /* Delete a file in temp Flash Block. */
;;;375            continue;
;;;376          }
;;;377        }
;;;378        do {
;;;379          adr = fs_rd_alloc (adr, &fa);
00002a  4669              MOV      r1,sp
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       fs_rd_alloc
000032  4606              MOV      r6,r0
;;;380          if ((fa.fileID & 0x7FFF) == fcb->fileID) {
000034  f8bd0004          LDRH     r0,[sp,#4]
000038  8821              LDRH     r1,[r4,#0]
00003a  f3c0000e          UBFX     r0,r0,#0,#15
00003e  4288              CMP      r0,r1
000040  d10a              BNE      |L1.88|
;;;381            /* Clear the fileID values */
;;;382            invalid = ~fcb->InitVal;
000042  68a0              LDR      r0,[r4,#8]
;;;383            fs_WriteBlock ((adr & ~1) + 12, &invalid, 4, fcb);
000044  4623              MOV      r3,r4
000046  43c0              MVNS     r0,r0                 ;382
000048  9004              STR      r0,[sp,#0x10]
00004a  f0260001          BIC      r0,r6,#1
00004e  300c              ADDS     r0,r0,#0xc
000050  2204              MOVS     r2,#4
000052  a904              ADD      r1,sp,#0x10
000054  f7fffffe          BL       fs_WriteBlock
                  |L1.88|
;;;384          }
;;;385        } while (fa.end != fcb->InitVal);
000058  9800              LDR      r0,[sp,#0]
00005a  68a1              LDR      r1,[r4,#8]
00005c  4288              CMP      r0,r1
00005e  d1e4              BNE      |L1.42|
;;;386    
;;;387        /* Check if this Flash Block is all invalidated */
;;;388        if (fs_BlockInvalid (bl, fcb) == __TRUE) {
000060  4621              MOV      r1,r4
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       fs_BlockInvalid
000068  2801              CMP      r0,#1
00006a  d009              BEQ      |L1.128|
00006c  e00c              B        |L1.136|
                  |L1.110|
00006e  9900              LDR      r1,[sp,#0]            ;367
000070  68a0              LDR      r0,[r4,#8]            ;367
000072  4281              CMP      r1,r0                 ;367
000074  d008              BEQ      |L1.136|
000076  f0800003          EOR      r0,r0,#3              ;367
00007a  4281              CMP      r1,r0                 ;367
00007c  d004              BEQ      |L1.136|
00007e  e7d4              B        |L1.42|
                  |L1.128|
;;;389          /* All file blocks stored in this Flash Block are invalid */
;;;390          fs_InitBlock (bl, fcb);
000080  4621              MOV      r1,r4
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       fs_InitBlock
                  |L1.136|
000088  1c6d              ADDS     r5,r5,#1              ;362
                  |L1.138|
00008a  88e0              LDRH     r0,[r4,#6]            ;362
00008c  42a8              CMP      r0,r5                 ;362
00008e  d8bd              BHI      |L1.12|
;;;391        }
;;;392      }
;;;393    }
000090  b005              ADD      sp,sp,#0x14
000092  bdf0              POP      {r4-r7,pc}
;;;394    
                          ENDP

                  alloc_free_bl PROC
;;;125    
;;;126    static BOOL alloc_free_bl (FDBUF *fb, IOB *fcb) {
000094  b5f8              PUSH     {r3-r7,lr}
000096  4606              MOV      r6,r0
000098  460d              MOV      r5,r1
;;;127      U32 bl,adr,bflag;
;;;128    
;;;129      /* Allocate an empty Flash Block. */
;;;130      for (bl = 0; bl < fcb->NumSect; bl++) {
00009a  2400              MOVS     r4,#0
00009c  e025              B        |L1.234|
                  |L1.158|
;;;131        adr = fs_adr_sig (bl, fcb);
00009e  4629              MOV      r1,r5
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       fs_adr_sig
0000a6  4607              MOV      r7,r0
;;;132        fs_rd_sig (adr, &bflag);
0000a8  4669              MOV      r1,sp
0000aa  f7fffffe          BL       fs_rd_sig
;;;133        if (bflag == fcb->InitVal) {
0000ae  68a8              LDR      r0,[r5,#8]
0000b0  9900              LDR      r1,[sp,#0]
0000b2  4288              CMP      r0,r1
0000b4  d118              BNE      |L1.232|
;;;134          bflag = fcb->InitVal ^ BlockTEMP;
0000b6  f0800003          EOR      r0,r0,#3
;;;135          fs_WriteBlock ((adr & ~1), &bflag, 4, fcb);
0000ba  9000              STR      r0,[sp,#0]
0000bc  f0270001          BIC      r0,r7,#1
0000c0  462b              MOV      r3,r5
0000c2  2204              MOVS     r2,#4
0000c4  4669              MOV      r1,sp
0000c6  f7fffffe          BL       fs_WriteBlock
;;;136          fb->fblock = bl;
0000ca  8074              STRH     r4,[r6,#2]
;;;137          fb->fbot   = 0;
0000cc  2000              MOVS     r0,#0
;;;138          fb->ftop   = ((DEVCONF *)fcb->DevCfg)[bl].bEnd   -
0000ce  6070              STR      r0,[r6,#4]
0000d0  2104              MOVS     r1,#4
0000d2  68e8              LDR      r0,[r5,#0xc]
0000d4  eb0101c4          ADD      r1,r1,r4,LSL #3
0000d8  5841              LDR      r1,[r0,r1]
0000da  f8500034          LDR      r0,[r0,r4,LSL #3]
0000de  1a08              SUBS     r0,r1,r0
0000e0  3808              SUBS     r0,r0,#8
;;;139                       ((DEVCONF *)fcb->DevCfg)[bl].bStart -  sizeof(FALLOC);
;;;140          return (__TRUE);
0000e2  60b0              STR      r0,[r6,#8]
0000e4  2001              MOVS     r0,#1
;;;141        }
;;;142      }
;;;143      return (__FALSE);
;;;144    }
0000e6  bdf8              POP      {r3-r7,pc}
                  |L1.232|
0000e8  1c64              ADDS     r4,r4,#1              ;130
                  |L1.234|
0000ea  88e8              LDRH     r0,[r5,#6]            ;130
0000ec  42a0              CMP      r0,r4                 ;130
0000ee  d8d6              BHI      |L1.158|
0000f0  2000              MOVS     r0,#0                 ;143
0000f2  bdf8              POP      {r3-r7,pc}
;;;145    
                          ENDP

                  copy_file PROC
;;;190    
;;;191    static BOOL copy_file (FDBUF *fb, IOB *fcb) {
0000f4  e92d41f0          PUSH     {r4-r8,lr}
0000f8  4605              MOV      r5,r0
;;;192      U32 n,nr;
;;;193    
;;;194      /* Make sure that 'filename' starts on 4-byte boundary */
;;;195      fb->fbot = (fb->fbot + 3) & ~3;
0000fa  6840              LDR      r0,[r0,#4]
0000fc  460c              MOV      r4,r1                 ;191
0000fe  1cc0              ADDS     r0,r0,#3
000100  f0200003          BIC      r0,r0,#3
;;;196      if (fb->ftop < fb->fbot + 256) {
000104  6068              STR      r0,[r5,#4]
000106  68a9              LDR      r1,[r5,#8]
000108  f5007080          ADD      r0,r0,#0x100
00010c  4281              CMP      r1,r0
00010e  d205              BCS      |L1.284|
;;;197        /* Allocate an empty Flash Block. */
;;;198        if (alloc_free_bl (fb, fcb) == __FALSE) {
000110  4621              MOV      r1,r4
000112  4628              MOV      r0,r5
000114  f7fffffe          BL       alloc_free_bl
000118  2800              CMP      r0,#0
00011a  d07e              BEQ      |L1.538|
                  |L1.284|
00011c  e9d40105          LDRD     r0,r1,[r4,#0x14]
;;;199          /* Error, no empty Flash Blocks left */
;;;200          return (__FALSE);
;;;201        }
;;;202      }
;;;203      /* Copy File Name first. */
;;;204      n = (fcb->_ftop - fcb->_fbot + 3) & ~3;
000120  1a09              SUBS     r1,r1,r0
000122  1cc9              ADDS     r1,r1,#3
000124  f0210603          BIC      r6,r1,#3
;;;205      if (n > CBUFLEN) {
000128  f44f7180          MOV      r1,#0x100
00012c  428e              CMP      r6,r1
00012e  d900              BLS      |L1.306|
;;;206        n = CBUFLEN;
000130  460e              MOV      r6,r1
                  |L1.306|
;;;207      }
;;;208      fs_ReadBlock  (((DEVCONF *)fcb->DevCfg)[fcb->_fblock].bStart + fcb->_fbot,
000132  8a22              LDRH     r2,[r4,#0x10]
000134  68e1              LDR      r1,[r4,#0xc]
000136  4623              MOV      r3,r4
000138  f8511032          LDR      r1,[r1,r2,LSL #3]
00013c  4632              MOV      r2,r6
00013e  4408              ADD      r0,r0,r1
000140  49f8              LDR      r1,|L1.1316|
000142  f7fffffe          BL       fs_ReadBlock
;;;209                     &cbuf, n, fcb);
;;;210      fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fb->fblock].bStart + fb->fbot, 
000146  8869              LDRH     r1,[r5,#2]
000148  68e0              LDR      r0,[r4,#0xc]
00014a  4623              MOV      r3,r4
00014c  4632              MOV      r2,r6
00014e  f8500031          LDR      r0,[r0,r1,LSL #3]
000152  6869              LDR      r1,[r5,#4]
000154  4408              ADD      r0,r0,r1
000156  49f3              LDR      r1,|L1.1316|
000158  f7fffffe          BL       fs_WriteBlock
;;;211                     &cbuf, n, fcb);
;;;212    
;;;213      fb->fbot += n;
00015c  6868              LDR      r0,[r5,#4]
;;;214    
;;;215      alloc.end    = fb->fbot;
00015e  f8df83c8          LDR      r8,|L1.1320|
000162  1981              ADDS     r1,r0,r6              ;213
000164  6069              STR      r1,[r5,#4]
;;;216      alloc.fileID = fcb->fileID | 0x8000;
000166  f8c81000          STR      r1,[r8,#0]  ; alloc
00016a  8821              LDRH     r1,[r4,#0]
;;;217      alloc.index  = 0;
00016c  2600              MOVS     r6,#0
00016e  f4414100          ORR      r1,r1,#0x8000         ;216
000172  f8a81004          STRH     r1,[r8,#4]            ;216
000176  f8a86006          STRH     r6,[r8,#6]
;;;218      fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fb->fblock].bStart + fb->ftop,
00017a  8869              LDRH     r1,[r5,#2]
00017c  68e0              LDR      r0,[r4,#0xc]
00017e  4623              MOV      r3,r4
000180  2208              MOVS     r2,#8
000182  f8500031          LDR      r0,[r0,r1,LSL #3]
000186  68a9              LDR      r1,[r5,#8]
000188  4408              ADD      r0,r0,r1
00018a  4641              MOV      r1,r8
00018c  f7fffffe          BL       fs_WriteBlock
;;;219                     &alloc, sizeof (FALLOC), fcb);
;;;220      fb->ftop  -= sizeof (FALLOC);
000190  68a8              LDR      r0,[r5,#8]
000192  3808              SUBS     r0,r0,#8
;;;221    
;;;222      /* Copy the file content. */
;;;223      fcb->_ftop = 0;
000194  60a8              STR      r0,[r5,#8]
;;;224      fcb->_fbot = 0;
000196  61a6              STR      r6,[r4,#0x18]
;;;225      fcb->_fidx = 0;
000198  6166              STR      r6,[r4,#0x14]
00019a  8266              STRH     r6,[r4,#0x12]
;;;226      fb->index  = 0;
00019c  802e              STRH     r6,[r5,#0]
;;;227    
;;;228      while ((nr = read_cbuf (fcb)) != 0) {
00019e  e008              B        |L1.434|
                  |L1.416|
;;;229        if (write_cbuf (fb, fcb, nr) == __FALSE) {
0001a0  4632              MOV      r2,r6
0001a2  4621              MOV      r1,r4
0001a4  4628              MOV      r0,r5
0001a6  f7fffffe          BL       write_cbuf
0001aa  2800              CMP      r0,#0
0001ac  d03f              BEQ      |L1.558|
;;;230          return (__FALSE);
;;;231        }
;;;232        if (nr < CBUFLEN) {
0001ae  2eff              CMP      r6,#0xff
0001b0  d923              BLS      |L1.506|
                  |L1.434|
0001b2  2600              MOVS     r6,#0
                  |L1.436|
0001b4  e9d40105          LDRD     r0,r1,[r4,#0x14]
0001b8  4281              CMP      r1,r0
0001ba  d103              BNE      |L1.452|
0001bc  4620              MOV      r0,r4
0001be  f7fffffe          BL       get_fblock
0001c2  b1c0              CBZ      r0,|L1.502|
                  |L1.452|
0001c4  e9d41205          LDRD     r1,r2,[r4,#0x14]
0001c8  f5c67080          RSB      r0,r6,#0x100
0001cc  1a57              SUBS     r7,r2,r1
0001ce  42b8              CMP      r0,r7
0001d0  d200              BCS      |L1.468|
0001d2  4607              MOV      r7,r0
                  |L1.468|
0001d4  8a22              LDRH     r2,[r4,#0x10]
0001d6  68e0              LDR      r0,[r4,#0xc]
0001d8  4623              MOV      r3,r4
0001da  f8500032          LDR      r0,[r0,r2,LSL #3]
0001de  463a              MOV      r2,r7
0001e0  4408              ADD      r0,r0,r1
0001e2  49d0              LDR      r1,|L1.1316|
0001e4  4431              ADD      r1,r1,r6
0001e6  f7fffffe          BL       fs_ReadBlock
0001ea  6960              LDR      r0,[r4,#0x14]
0001ec  443e              ADD      r6,r6,r7
0001ee  4438              ADD      r0,r0,r7
0001f0  6160              STR      r0,[r4,#0x14]
0001f2  2eff              CMP      r6,#0xff
0001f4  d9de              BLS      |L1.436|
                  |L1.502|
0001f6  2e00              CMP      r6,#0                 ;228
0001f8  d1d2              BNE      |L1.416|
                  |L1.506|
;;;233          break;
;;;234        }
;;;235      }
;;;236    
;;;237      /* Close this file, write File Allocation Information. */
;;;238      alloc.end    = fb->fbot;
0001fa  6869              LDR      r1,[r5,#4]
;;;239      alloc.fileID = fcb->fileID;
0001fc  f8c81000          STR      r1,[r8,#0]  ; alloc
000200  8821              LDRH     r1,[r4,#0]
000202  f8a81004          STRH     r1,[r8,#4]
;;;240      alloc.index  = fb->index;
000206  8829              LDRH     r1,[r5,#0]
000208  f8a81006          STRH     r1,[r8,#6]
;;;241      fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fb->fblock].bStart + fb->ftop, 
00020c  8869              LDRH     r1,[r5,#2]
00020e  68e0              LDR      r0,[r4,#0xc]
000210  f8500031          LDR      r0,[r0,r1,LSL #3]
000214  68a9              LDR      r1,[r5,#8]
000216  4408              ADD      r0,r0,r1
000218  e000              B        |L1.540|
                  |L1.538|
00021a  e008              B        |L1.558|
                  |L1.540|
00021c  4623              MOV      r3,r4
00021e  2208              MOVS     r2,#8
000220  49c1              LDR      r1,|L1.1320|
000222  f7fffffe          BL       fs_WriteBlock
;;;242                     &alloc, sizeof (FALLOC), fcb);
;;;243      fb->ftop -= sizeof (FALLOC);
000226  68a8              LDR      r0,[r5,#8]
000228  3808              SUBS     r0,r0,#8
;;;244      return (__TRUE);
00022a  60a8              STR      r0,[r5,#8]
00022c  2001              MOVS     r0,#1
                  |L1.558|
;;;245    }
00022e  e8bd81f0          POP      {r4-r8,pc}
;;;246    
                          ENDP

                  fdefrag PROC
;;;27     
;;;28     int fdefrag (const char *drive) {
000232  e92d41ff          PUSH     {r0-r8,lr}
000236  4605              MOV      r5,r0
;;;29       /* Re-sort FlashFS files so that used Flash pages are reduced. */
;;;30       IOB *fcb,*iop;
;;;31       int handle;
;;;32       FDBUF fwr;
;;;33       BOOL defrag_fail;
;;;34       U32 i,adr,bl,bflag;
;;;35     
;;;36       START_LOCK (int);
000238  48bc              LDR      r0,|L1.1324|
00023a  f7fffffe          BL       _mutex_acquire
;;;37     
;;;38       /* Find an unused _iob structure. */
;;;39       if ((handle = fs_find_iob ()) == EOF) {
00023e  f7fffffe          BL       fs_find_iob
000242  1c41              ADDS     r1,r0,#1
000244  d024              BEQ      |L1.656|
;;;40         RETURN (1);
;;;41       }
;;;42       fcb = &_iob[handle];
000246  eb000180          ADD      r1,r0,r0,LSL #2
00024a  eb0100c0          ADD      r0,r1,r0,LSL #3
00024e  49b8              LDR      r1,|L1.1328|
000250  eb010480          ADD      r4,r1,r0,LSL #2
;;;43       /* Get the drive index. */
;;;44       fcb->drive = fs_get_drive (drive);
000254  4628              MOV      r0,r5
000256  f7fffffe          BL       fs_get_drive
00025a  f01000ff          ANDS     r0,r0,#0xff
00025e  7120              STRB     r0,[r4,#4]
;;;45       if (fcb->drive == DRV_NONE && *drive == 0) {
000260  d104              BNE      |L1.620|
000262  7828              LDRB     r0,[r5,#0]
000264  b928              CBNZ     r0,|L1.626|
;;;46         /* Empty string provided for a drive name. */
;;;47         fcb->drive = _DEF_DRIVE;
000266  48b3              LDR      r0,|L1.1332|
000268  8800              LDRH     r0,[r0,#0]  ; _DEF_DRIVE
00026a  7120              STRB     r0,[r4,#4]
                  |L1.620|
;;;48       }
;;;49       if (fcb->drive == DRV_MCARD) {
00026c  b2c0              UXTB     r0,r0
00026e  2804              CMP      r0,#4
000270  d00e              BEQ      |L1.656|
                  |L1.626|
;;;50         /* Memory Card currently not supported. */
;;;51         RETURN (1);
;;;52       }
;;;53       /* Set drive parameters. */
;;;54       if (fs_set_params (fcb) == __FALSE) {
000272  4620              MOV      r0,r4
000274  f7fffffe          BL       fs_set_params
000278  b150              CBZ      r0,|L1.656|
;;;55         RETURN (1);
;;;56       }
;;;57     
;;;58       /* Check if there is an opened file. */
;;;59       for (i = 0, iop = &_iob[0]; i < _NFILE; iop++, i++) {
00027a  2100              MOVS     r1,#0
00027c  48ac              LDR      r0,|L1.1328|
00027e  4aae              LDR      r2,|L1.1336|
000280  e00a              B        |L1.664|
                  |L1.642|
;;;60         if (iop->drive != fcb->drive) {
000282  7903              LDRB     r3,[r0,#4]
000284  7925              LDRB     r5,[r4,#4]
000286  42ab              CMP      r3,r5
000288  d104              BNE      |L1.660|
;;;61           continue;
;;;62         }
;;;63         if ((iop->flags & (_IOWRT | _IOREAD))) {
00028a  8843              LDRH     r3,[r0,#2]
00028c  079b              LSLS     r3,r3,#30
00028e  d001              BEQ      |L1.660|
                  |L1.656|
;;;64           /* Error, a file is opened. */
;;;65           RETURN (1);
000290  2401              MOVS     r4,#1
000292  e06b              B        |L1.876|
                  |L1.660|
000294  3034              ADDS     r0,r0,#0x34           ;59
000296  1c49              ADDS     r1,r1,#1              ;59
                  |L1.664|
000298  8813              LDRH     r3,[r2,#0]            ;59  ; _NFILE
00029a  4299              CMP      r1,r3                 ;59
00029c  d3f1              BCC      |L1.642|
;;;66         }
;;;67       }
;;;68     
;;;69       /* Erase all invalidated Flash Blocks if any. */
;;;70       for (bl = 0; bl < fcb->NumSect; bl++) {
00029e  2500              MOVS     r5,#0
0002a0  e015              B        |L1.718|
                  |L1.674|
;;;71         adr = fs_adr_sig (bl, fcb);
0002a2  4621              MOV      r1,r4
0002a4  4628              MOV      r0,r5
0002a6  f7fffffe          BL       fs_adr_sig
;;;72         fs_rd_sig (adr, &bflag);
0002aa  4669              MOV      r1,sp
0002ac  f7fffffe          BL       fs_rd_sig
;;;73         if (bflag != fcb->InitVal) {
0002b0  68a0              LDR      r0,[r4,#8]
0002b2  9900              LDR      r1,[sp,#0]
0002b4  4288              CMP      r0,r1
0002b6  d009              BEQ      |L1.716|
;;;74           /* Check if this Flash Block is all invalidated */
;;;75           if (fs_BlockInvalid (bl, fcb) == __TRUE) {
0002b8  4621              MOV      r1,r4
0002ba  4628              MOV      r0,r5
0002bc  f7fffffe          BL       fs_BlockInvalid
0002c0  2801              CMP      r0,#1
0002c2  d103              BNE      |L1.716|
;;;76             fs_InitBlock (bl, fcb);
0002c4  4621              MOV      r1,r4
0002c6  4628              MOV      r0,r5
0002c8  f7fffffe          BL       fs_InitBlock
                  |L1.716|
0002cc  1c6d              ADDS     r5,r5,#1              ;70
                  |L1.718|
0002ce  88e0              LDRH     r0,[r4,#6]            ;70
0002d0  42a8              CMP      r0,r5                 ;70
0002d2  d8e6              BHI      |L1.674|
;;;77           }
;;;78         }
;;;79       }
;;;80     
;;;81       /* Scan all files stored to FlashFS. */
;;;82       fcb->fileID = 0;
0002d4  2000              MOVS     r0,#0
0002d6  8020              STRH     r0,[r4,#0]
;;;83       fwr.ftop    = 0;
;;;84       fwr.fbot    = 0;
0002d8  9003              STR      r0,[sp,#0xc]
;;;85       defrag_fail = __FALSE;
0002da  4606              MOV      r6,r0
;;;86       while (get_next_file (fcb) == __TRUE) {
0002dc  9002              STR      r0,[sp,#8]
0002de  e008              B        |L1.754|
                  |L1.736|
;;;87         if (copy_file (&fwr, fcb) == __FALSE) {
0002e0  4621              MOV      r1,r4
0002e2  a801              ADD      r0,sp,#4
0002e4  f7fffffe          BL       copy_file
0002e8  b150              CBZ      r0,|L1.768|
;;;88           /* Defragmentation failed, delete last temp file. */
;;;89           delete_file (fcb, __TRUE);
;;;90           defrag_fail = __TRUE;
;;;91           break;
;;;92         }
;;;93         delete_file (fcb, __FALSE);
0002ea  2100              MOVS     r1,#0
0002ec  4620              MOV      r0,r4
0002ee  f7fffffe          BL       delete_file
                  |L1.754|
0002f2  4620              MOV      r0,r4                 ;86
0002f4  f7fffffe          BL       get_next_file
0002f8  2801              CMP      r0,#1                 ;86
0002fa  d0f1              BEQ      |L1.736|
                  |L1.764|
;;;94       }
;;;95     
;;;96       /* Update FBlock usage signatures, and erase old pages. */
;;;97       for (bl = 0; bl < fcb->NumSect; bl++) {
0002fc  2500              MOVS     r5,#0
0002fe  e02f              B        |L1.864|
                  |L1.768|
000300  2101              MOVS     r1,#1                 ;89
000302  4620              MOV      r0,r4                 ;89
000304  f7fffffe          BL       delete_file
000308  2601              MOVS     r6,#1                 ;90
00030a  e7f7              B        |L1.764|
                  |L1.780|
;;;98         adr = fs_adr_sig (bl, fcb);
00030c  4621              MOV      r1,r4
00030e  4628              MOV      r0,r5
000310  f7fffffe          BL       fs_adr_sig
000314  4607              MOV      r7,r0
;;;99         fs_rd_sig (adr, &bflag);
000316  4669              MOV      r1,sp
000318  f7fffffe          BL       fs_rd_sig
;;;100        if (bflag == fcb->InitVal) {
00031c  68a0              LDR      r0,[r4,#8]
00031e  9900              LDR      r1,[sp,#0]
000320  4288              CMP      r0,r1
000322  d01c              BEQ      |L1.862|
;;;101          continue;
;;;102        }
;;;103        if ((bflag ^ BlockTEMP) == fcb->InitVal) {
000324  f0810103          EOR      r1,r1,#3
000328  4281              CMP      r1,r0
00032a  d113              BNE      |L1.852|
;;;104          bflag = fcb->InitVal ^ BlockUSED;
00032c  f080000f          EOR      r0,r0,#0xf
;;;105          if (fs_get_freeMem (bl, fcb) == 0) {
000330  9000              STR      r0,[sp,#0]
000332  4621              MOV      r1,r4
000334  4628              MOV      r0,r5
000336  f7fffffe          BL       fs_get_freeMem
00033a  b918              CBNZ     r0,|L1.836|
;;;106            bflag = fcb->InitVal ^ BlockFULL;
00033c  68a0              LDR      r0,[r4,#8]
00033e  f08000ff          EOR      r0,r0,#0xff
000342  9000              STR      r0,[sp,#0]
                  |L1.836|
;;;107          }
;;;108          fs_WriteBlock ((adr & ~1), &bflag, 4, fcb);
000344  f0270001          BIC      r0,r7,#1
000348  4623              MOV      r3,r4
00034a  2204              MOVS     r2,#4
00034c  4669              MOV      r1,sp
00034e  f7fffffe          BL       fs_WriteBlock
;;;109          continue;
000352  e004              B        |L1.862|
                  |L1.852|
;;;110        }
;;;111        if (defrag_fail == __FALSE) {
000354  b91e              CBNZ     r6,|L1.862|
;;;112          fs_InitBlock (bl, fcb);
000356  4621              MOV      r1,r4
000358  4628              MOV      r0,r5
00035a  f7fffffe          BL       fs_InitBlock
                  |L1.862|
00035e  1c6d              ADDS     r5,r5,#1              ;97
                  |L1.864|
000360  88e0              LDRH     r0,[r4,#6]            ;97
000362  42a8              CMP      r0,r5                 ;97
000364  d8d2              BHI      |L1.780|
;;;113        }
;;;114      }
;;;115      if (defrag_fail == __TRUE) {
000366  2e01              CMP      r6,#1
000368  d006              BEQ      |L1.888|
;;;116        RETURN (2);
;;;117      }
;;;118      RETURN (0);
00036a  2400              MOVS     r4,#0
                  |L1.876|
;;;119    
;;;120      END_LOCK;
00036c  486f              LDR      r0,|L1.1324|
00036e  f7fffffe          BL       _mutex_release
000372  4620              MOV      r0,r4
;;;121    }
000374  b004              ADD      sp,sp,#0x10
000376  e75a              B        |L1.558|
                  |L1.888|
000378  2402              MOVS     r4,#2                 ;116
00037a  e7f7              B        |L1.876|
;;;122    
                          ENDP

                  write_cbuf PROC
;;;278    
;;;279    static BOOL write_cbuf (FDBUF *fb, IOB *fcb, U32 len) {
00037c  e92d41f0          PUSH     {r4-r8,lr}
000380  4604              MOV      r4,r0
000382  460f              MOV      r7,r1
000384  4616              MOV      r6,r2
;;;280      U32 size,n;
;;;281      S8 *pb;
;;;282    
;;;283      pb = (S8 *)&cbuf;
000386  f8df819c          LDR      r8,|L1.1316|
;;;284      while (len) {
00038a  e037              B        |L1.1020|
                  |L1.908|
;;;285        n = len;
00038c  e9d41001          LDRD     r1,r0,[r4,#4]
;;;286        size = fb->ftop - fb->fbot - sizeof (FALLOC);
000390  1a40              SUBS     r0,r0,r1
000392  3808              SUBS     r0,r0,#8
000394  4635              MOV      r5,r6                 ;285
;;;287        if (n > size) {
000396  4286              CMP      r6,r0
000398  d900              BLS      |L1.924|
;;;288          n = size;
00039a  4605              MOV      r5,r0
                  |L1.924|
;;;289        }
;;;290        len -= n;
;;;291        fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fb->fblock].bStart + fb->fbot, 
00039c  8862              LDRH     r2,[r4,#2]
00039e  68f8              LDR      r0,[r7,#0xc]
0003a0  1b76              SUBS     r6,r6,r5              ;290
0003a2  463b              MOV      r3,r7
0003a4  f8500032          LDR      r0,[r0,r2,LSL #3]
0003a8  462a              MOV      r2,r5
0003aa  4408              ADD      r0,r0,r1
0003ac  4641              MOV      r1,r8
0003ae  f7fffffe          BL       fs_WriteBlock
;;;292                       pb, n, fcb);
;;;293        fb->fbot += n;
0003b2  6860              LDR      r0,[r4,#4]
;;;294        pb       += n;
0003b4  44a8              ADD      r8,r8,r5
0003b6  4428              ADD      r0,r0,r5              ;293
;;;295    
;;;296        if ((fb->ftop - sizeof (FALLOC)) > fb->fbot) {
0003b8  6060              STR      r0,[r4,#4]
0003ba  68a1              LDR      r1,[r4,#8]
0003bc  f1a10208          SUB      r2,r1,#8
0003c0  4282              CMP      r2,r0
0003c2  d81b              BHI      |L1.1020|
;;;297          /* Enough space in current Flash Block */
;;;298          continue;
;;;299        }
;;;300    
;;;301        /* No more free space, write File Allocation Information */
;;;302        alloc.end    = fb->fbot;
0003c4  4a58              LDR      r2,|L1.1320|
;;;303        alloc.fileID = fcb->fileID;
;;;304        alloc.index  = fb->index;
;;;305        fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fb->fblock].bStart + fb->ftop,
0003c6  463b              MOV      r3,r7
0003c8  6010              STR      r0,[r2,#0]            ;303  ; alloc
0003ca  8838              LDRH     r0,[r7,#0]            ;303
0003cc  8090              STRH     r0,[r2,#4]            ;303
0003ce  8820              LDRH     r0,[r4,#0]            ;304
0003d0  80d0              STRH     r0,[r2,#6]            ;304
0003d2  8862              LDRH     r2,[r4,#2]
0003d4  68f8              LDR      r0,[r7,#0xc]
0003d6  f8500032          LDR      r0,[r0,r2,LSL #3]
0003da  2208              MOVS     r2,#8
0003dc  4408              ADD      r0,r0,r1
0003de  4952              LDR      r1,|L1.1320|
0003e0  f7fffffe          BL       fs_WriteBlock
;;;306                       &alloc, sizeof (FALLOC), fcb);
;;;307        fb->ftop -= sizeof (FALLOC);
0003e4  68a0              LDR      r0,[r4,#8]
;;;308        fb->index++;
;;;309    
;;;310        /* Current Flash Block is full, allocate next one */
;;;311        if (alloc_free_bl (fb, fcb) == __FALSE) {
0003e6  4639              MOV      r1,r7
0003e8  3808              SUBS     r0,r0,#8              ;307
0003ea  60a0              STR      r0,[r4,#8]            ;308
0003ec  8820              LDRH     r0,[r4,#0]            ;308
0003ee  1c40              ADDS     r0,r0,#1              ;308
0003f0  8020              STRH     r0,[r4,#0]            ;308
0003f2  4620              MOV      r0,r4
0003f4  f7fffffe          BL       alloc_free_bl
0003f8  2800              CMP      r0,#0
0003fa  d002              BEQ      |L1.1026|
                  |L1.1020|
0003fc  2e00              CMP      r6,#0                 ;284
0003fe  d1c5              BNE      |L1.908|
;;;312          /* Error, no empty Flash Blocks left */
;;;313          return (__FALSE);
;;;314        }
;;;315      }
;;;316      return (__TRUE);
000400  2001              MOVS     r0,#1
                  |L1.1026|
;;;317    }
000402  e714              B        |L1.558|
;;;318    
                          ENDP

                  get_fblock PROC
;;;321    
;;;322    static BOOL get_fblock (IOB *fcb) {
000404  e92d41fc          PUSH     {r2-r8,lr}
000408  4604              MOV      r4,r0
;;;323      FALLOC fa;
;;;324      U32 i,bl,adr,prev;
;;;325    
;;;326      bl = fcb->_fblock;
00040a  8a05              LDRH     r5,[r0,#0x10]
;;;327      for (i = 0; i < fcb->NumSect; i++) {
00040c  2600              MOVS     r6,#0
00040e  e035              B        |L1.1148|
                  |L1.1040|
;;;328        /* Search for file blocks identified with identification 'fileID' */
;;;329        adr = fs_adr_sig (bl, fcb);
000410  4621              MOV      r1,r4
000412  4628              MOV      r0,r5
000414  f7fffffe          BL       fs_adr_sig
;;;330        adr = fs_rd_sig (adr, &fa.end);
000418  4669              MOV      r1,sp
00041a  f7fffffe          BL       fs_rd_sig
;;;331        if (fa.end == fcb->InitVal || fa.end == (fcb->InitVal ^ BlockTEMP)) {
00041e  9a00              LDR      r2,[sp,#0]
000420  68a1              LDR      r1,[r4,#8]
000422  428a              CMP      r2,r1
000424  d024              BEQ      |L1.1136|
000426  f0810103          EOR      r1,r1,#3
00042a  428a              CMP      r2,r1
00042c  d020              BEQ      |L1.1136|
;;;332          /* Skip free or temp Flash Blocks. */
;;;333          goto next;
;;;334        }
;;;335        for (prev = 0; ; prev = fa.end) {
00042e  2700              MOVS     r7,#0
                  |L1.1072|
;;;336          adr = fs_rd_alloc (adr, &fa);
000430  4669              MOV      r1,sp
000432  f7fffffe          BL       fs_rd_alloc
;;;337          if (fa.fileID == fcb->fileID  &&  fa.index == fcb->_fidx) {
000436  f8bd2004          LDRH     r2,[sp,#4]
00043a  8821              LDRH     r1,[r4,#0]
00043c  428a              CMP      r2,r1
00043e  d111              BNE      |L1.1124|
000440  f8bd1006          LDRH     r1,[sp,#6]
000444  8a62              LDRH     r2,[r4,#0x12]
000446  4291              CMP      r1,r2
000448  d10c              BNE      |L1.1124|
;;;338            /* Set Current File Block parameters */
;;;339            fcb->_fblock = bl;
;;;340            /* All file blocks are 4-byte aligned. */
;;;341            fcb->_fbot   = (prev + 3) & ~3;
00044a  1cff              ADDS     r7,r7,#3
00044c  8225              STRH     r5,[r4,#0x10]         ;339
00044e  f0270003          BIC      r0,r7,#3
;;;342            fcb->_ftop   = fa.end;
000452  6160              STR      r0,[r4,#0x14]
000454  9800              LDR      r0,[sp,#0]
;;;343            fcb->_fidx++; 
000456  61a0              STR      r0,[r4,#0x18]
000458  8a60              LDRH     r0,[r4,#0x12]
00045a  1c40              ADDS     r0,r0,#1
00045c  8260              STRH     r0,[r4,#0x12]
;;;344            return (__TRUE);
00045e  2001              MOVS     r0,#1
                  |L1.1120|
;;;345          }
;;;346          if (fa.end == fcb->InitVal) break;
;;;347        }
;;;348    next:if (++bl == fcb->NumSect) {
;;;349          bl = 0;
;;;350        }
;;;351      }
;;;352      return (__FALSE);
;;;353    }
000460  e8bd81fc          POP      {r2-r8,pc}
                  |L1.1124|
000464  9900              LDR      r1,[sp,#0]            ;346
000466  68a2              LDR      r2,[r4,#8]            ;346
000468  4291              CMP      r1,r2                 ;346
00046a  d001              BEQ      |L1.1136|
00046c  460f              MOV      r7,r1                 ;335
00046e  e7df              B        |L1.1072|
                  |L1.1136|
000470  88e0              LDRH     r0,[r4,#6]            ;348
000472  1c6d              ADDS     r5,r5,#1              ;348
000474  4285              CMP      r5,r0                 ;348
000476  d100              BNE      |L1.1146|
000478  2500              MOVS     r5,#0                 ;349
                  |L1.1146|
00047a  1c76              ADDS     r6,r6,#1              ;327
                  |L1.1148|
00047c  88e0              LDRH     r0,[r4,#6]            ;327
00047e  42b0              CMP      r0,r6                 ;327
000480  d8c6              BHI      |L1.1040|
000482  2000              MOVS     r0,#0                 ;352
000484  e7ec              B        |L1.1120|
;;;354    
                          ENDP

                  get_next_file PROC
;;;148    
;;;149    static BOOL get_next_file (IOB *fcb) {
000486  e92d5ffc          PUSH     {r2-r12,lr}
00048a  4604              MOV      r4,r0
;;;150      FALLOC fa;
;;;151      U32 bl,adr,prev;
;;;152      U32 fid,nid;
;;;153    
;;;154      /* Search for file with next higher fileID. */
;;;155      fid = fcb->fileID | 0x8000;
00048c  8800              LDRH     r0,[r0,#0]
;;;156      nid = 0xFFFF;
00048e  f64f79ff          MOV      r9,#0xffff
000492  464d              MOV      r5,r9
000494  f4404700          ORR      r7,r0,#0x8000         ;155
;;;157      for (bl = 0; bl < fcb->NumSect; bl++) {
000498  2600              MOVS     r6,#0
00049a  e033              B        |L1.1284|
                  |L1.1180|
;;;158        adr = fs_adr_sig (bl, fcb);
00049c  4621              MOV      r1,r4
00049e  4630              MOV      r0,r6
0004a0  f7fffffe          BL       fs_adr_sig
;;;159        adr = fs_rd_sig (adr, &fa.end);
0004a4  4669              MOV      r1,sp
0004a6  f7fffffe          BL       fs_rd_sig
0004aa  4602              MOV      r2,r0
;;;160        if (fa.end == fcb->InitVal || fa.end == (fcb->InitVal ^ BlockTEMP)) {
0004ac  9900              LDR      r1,[sp,#0]
0004ae  68a0              LDR      r0,[r4,#8]
0004b0  4281              CMP      r1,r0
0004b2  d026              BEQ      |L1.1282|
0004b4  f0800003          EOR      r0,r0,#3
0004b8  4281              CMP      r1,r0
0004ba  d022              BEQ      |L1.1282|
;;;161          /* Skip free or temp Flash Blocks. */
;;;162          continue;
;;;163        }
;;;164        for (prev = 0; ; prev = fa.end) {
0004bc  f04f0800          MOV      r8,#0
;;;165          adr = fs_rd_alloc (adr, &fa);
;;;166          if (fa.fileID > fid && fa.fileID < nid) {
;;;167            nid = fa.fileID;
;;;168            /* File name block is word aligned. */
;;;169            fcb->_fblock = bl;
0004c0  fa1ffb86          UXTH     r11,r6
;;;170            fcb->_fbot   = (prev + 3) & ~3;
;;;171            fcb->_ftop   = fa.end;
;;;172            if (nid == fid+1) {
0004c4  f1070a01          ADD      r10,r7,#1
                  |L1.1224|
0004c8  4669              MOV      r1,sp                 ;165
0004ca  4610              MOV      r0,r2                 ;165
0004cc  f7fffffe          BL       fs_rd_alloc
0004d0  4602              MOV      r2,r0                 ;165
0004d2  f8bd0004          LDRH     r0,[sp,#4]            ;166
0004d6  42b8              CMP      r0,r7                 ;166
0004d8  d90d              BLS      |L1.1270|
0004da  42a8              CMP      r0,r5                 ;166
0004dc  d20b              BCS      |L1.1270|
0004de  4605              MOV      r5,r0                 ;167
0004e0  f1080003          ADD      r0,r8,#3              ;170
0004e4  f8a4b010          STRH     r11,[r4,#0x10]        ;169
0004e8  f0200003          BIC      r0,r0,#3              ;170
0004ec  6160              STR      r0,[r4,#0x14]         ;171
0004ee  9800              LDR      r0,[sp,#0]            ;171
0004f0  61a0              STR      r0,[r4,#0x18]
0004f2  4555              CMP      r5,r10
0004f4  d00e              BEQ      |L1.1300|
                  |L1.1270|
;;;173              goto x;
;;;174            }
;;;175          }
;;;176          if (fa.end == fcb->InitVal) break;
0004f6  9900              LDR      r1,[sp,#0]
0004f8  68a0              LDR      r0,[r4,#8]
0004fa  4281              CMP      r1,r0
0004fc  d001              BEQ      |L1.1282|
0004fe  4688              MOV      r8,r1                 ;164
000500  e7e2              B        |L1.1224|
                  |L1.1282|
000502  1c76              ADDS     r6,r6,#1              ;157
                  |L1.1284|
000504  88e0              LDRH     r0,[r4,#6]            ;157
000506  42b0              CMP      r0,r6                 ;157
000508  d8c8              BHI      |L1.1180|
;;;177        }
;;;178      }
;;;179      if (nid == 0xFFFF) {
00050a  454d              CMP      r5,r9
00050c  d102              BNE      |L1.1300|
;;;180        /* Next file not found. */
;;;181        return (__FALSE);
00050e  2000              MOVS     r0,#0
                  |L1.1296|
;;;182      }
;;;183    x:fcb->fileID = nid & 0x7FFF;
;;;184      fcb->_fidx  = 0;
;;;185      return (__TRUE);
;;;186    }
000510  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.1300|
000514  f3c5000e          UBFX     r0,r5,#0,#15          ;183
000518  8020              STRH     r0,[r4,#0]            ;183
00051a  2000              MOVS     r0,#0                 ;184
00051c  8260              STRH     r0,[r4,#0x12]         ;184
00051e  2001              MOVS     r0,#1                 ;185
000520  e7f6              B        |L1.1296|
000522  0000              DCW      0x0000
                  |L1.1316|
                          DCD      ||.bss||
                  |L1.1320|
                          DCD      ||.data||
                  |L1.1324|
                          DCD      _stream_list_lock
                  |L1.1328|
                          DCD      _iob
                  |L1.1332|
                          DCD      _DEF_DRIVE
                  |L1.1336|
                          DCD      _NFILE
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cbuf
                          %        260

                          AREA ||.data||, DATA, ALIGN=2

                  alloc
                          %        8
