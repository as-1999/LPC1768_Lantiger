; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\fs_mmc.o --depend=.\Obj\fs_mmc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\fs_mmc.crf FlashFS\fs_mmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mmc_command PROC
;;;145    
;;;146    static U8 mmc_command (U8 cmd, U32 arg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;147      /* Send a Command to Flash card and get a Response. */
;;;148      U32 r1,i;
;;;149    
;;;150      spi_send (0xFF);
000006  20ff              MOVS     r0,#0xff
000008  f7fffffe          BL       spi_send
;;;151      spi_send (cmd);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       spi_send
;;;152      spi_send (arg >> 24);
000012  0e20              LSRS     r0,r4,#24
000014  f7fffffe          BL       spi_send
;;;153      spi_send (arg >> 16);
000018  f3c44007          UBFX     r0,r4,#16,#8
00001c  f7fffffe          BL       spi_send
;;;154      spi_send (arg >> 8);
000020  f3c42007          UBFX     r0,r4,#8,#8
000024  f7fffffe          BL       spi_send
;;;155      spi_send (arg);
000028  b2e0              UXTB     r0,r4
00002a  f7fffffe          BL       spi_send
;;;156      /* Checksum, should only be valid for the first command.CMD0 */
;;;157      spi_send (0x95);
00002e  2095              MOVS     r0,#0x95
000030  f7fffffe          BL       spi_send
;;;158    
;;;159      /* Response will come after 1 - 8 retries. */
;;;160      for (i = 0; i < 8; i++) {
000034  2400              MOVS     r4,#0
                  |L1.54|
;;;161        r1 = spi_send (0xFF);
000036  20ff              MOVS     r0,#0xff
000038  f7fffffe          BL       spi_send
;;;162        if (r1 != 0xFF) {
00003c  28ff              CMP      r0,#0xff
00003e  d102              BNE      |L1.70|
000040  1c64              ADDS     r4,r4,#1              ;160
000042  2c08              CMP      r4,#8                 ;160
000044  d3f7              BCC      |L1.54|
                  |L1.70|
;;;163          break;
;;;164        }
;;;165      }
;;;166      return (r1);
000046  b2c0              UXTB     r0,r0
;;;167    }
000048  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  mmc_init PROC
;;;55     
;;;56     BOOL mmc_init (void) {
00004a  e92d41f0          PUSH     {r4-r8,lr}
;;;57       /* Initialize and enable the Flash Card. */
;;;58       U32 i,r1;
;;;59     
;;;60       /* Initialize SPI interface and enable Flash Card SPI mode. */
;;;61       spi_init ();
00004e  f7fffffe          BL       spi_init
;;;62     
;;;63       spi_ss (1);
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       spi_ss
;;;64       spi_hi_speed (__FALSE);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       spi_hi_speed
;;;65     
;;;66       /* Send SPI Command with card not selected at 400 KBit. */
;;;67       for (i = 0; i < 16; i++) {
00005e  2400              MOVS     r4,#0
                  |L1.96|
;;;68         spi_send (0xFF);
000060  20ff              MOVS     r0,#0xff
000062  f7fffffe          BL       spi_send
000066  1c64              ADDS     r4,r4,#1              ;67
000068  2c10              CMP      r4,#0x10              ;67
00006a  d3f9              BCC      |L1.96|
;;;69       }
;;;70     
;;;71       /* Reset the card, send CMD0. */
;;;72       spi_ss (0);
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       spi_ss
;;;73       r1 = mmc_command (GO_IDLE_STATE, 0);
000072  2100              MOVS     r1,#0
000074  2040              MOVS     r0,#0x40
000076  f7fffffe          BL       mmc_command
;;;74       for (i = 0; i < 100; i++) {
00007a  2500              MOVS     r5,#0
                  |L1.124|
;;;75         if (r1 == 0x01) {
00007c  2801              CMP      r0,#1
00007e  d00c              BEQ      |L1.154|
;;;76           break;
;;;77         }
;;;78         r1 = spi_send (0xFF);
000080  20ff              MOVS     r0,#0xff
000082  f7fffffe          BL       spi_send
000086  1c6d              ADDS     r5,r5,#1              ;74
000088  4604              MOV      r4,r0
00008a  2d64              CMP      r5,#0x64              ;74
00008c  d3f6              BCC      |L1.124|
;;;79       }
;;;80       spi_ss (1);
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       spi_ss
;;;81       if (r1 != 0x01) {
000094  2c01              CMP      r4,#1
000096  d15e              BNE      |L1.342|
000098  e002              B        |L1.160|
                  |L1.154|
00009a  2001              MOVS     r0,#1                 ;80
00009c  f7fffffe          BL       spi_ss
                  |L1.160|
;;;82         /* Failed to Reset Flash Card. */
;;;83         return (__FALSE);
;;;84       }
;;;85       spi_hi_speed (__TRUE);
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       spi_hi_speed
;;;86     
;;;87       CardType = CARD_NONE;
0000a6  4ccb              LDR      r4,|L1.980|
0000a8  2000              MOVS     r0,#0
;;;88       /* Check if SD card, send ACMD41 */
;;;89       for (i = 0; i < 50000; i++) {
0000aa  4605              MOV      r5,r0
0000ac  7020              STRB     r0,[r4,#0]            ;87
0000ae  f24c3750          MOV      r7,#0xc350
                  |L1.178|
;;;90         spi_ss (0);
0000b2  2000              MOVS     r0,#0
0000b4  f7fffffe          BL       spi_ss
;;;91         r1 = mmc_command (APP_CMD, 0);
0000b8  2100              MOVS     r1,#0
0000ba  2077              MOVS     r0,#0x77
0000bc  f7fffffe          BL       mmc_command
0000c0  4606              MOV      r6,r0
;;;92         spi_ss (1);
0000c2  2001              MOVS     r0,#1
0000c4  f7fffffe          BL       spi_ss
;;;93         if (r1 & 0x04) {
0000c8  0770              LSLS     r0,r6,#29
0000ca  d410              BMI      |L1.238|
;;;94           /* Illegal Command. */
;;;95           break;
;;;96         }
;;;97         if (r1 == 0x01) {
0000cc  2e01              CMP      r6,#1
0000ce  d10b              BNE      |L1.232|
;;;98           spi_ss (0);
0000d0  2000              MOVS     r0,#0
0000d2  f7fffffe          BL       spi_ss
;;;99           r1 = mmc_command (SD_SEND_OP_COND, 0);
0000d6  2100              MOVS     r1,#0
0000d8  2069              MOVS     r0,#0x69
0000da  f7fffffe          BL       mmc_command
0000de  4606              MOV      r6,r0
;;;100          spi_ss (1);
0000e0  2001              MOVS     r0,#1
0000e2  f7fffffe          BL       spi_ss
;;;101          if (r1 == 0x00) {
0000e6  b12e              CBZ      r6,|L1.244|
                  |L1.232|
0000e8  1c6d              ADDS     r5,r5,#1              ;89
0000ea  42bd              CMP      r5,r7                 ;89
0000ec  d3e1              BCC      |L1.178|
                  |L1.238|
;;;102            /* OK, SD card initialized. */
;;;103            CardType = CARD_SD;
;;;104            break;
;;;105          }
;;;106        }
;;;107      }
;;;108      if (CardType == CARD_NONE) {
0000ee  7820              LDRB     r0,[r4,#0]  ; CardType
0000f0  b110              CBZ      r0,|L1.248|
0000f2  e017              B        |L1.292|
                  |L1.244|
0000f4  2002              MOVS     r0,#2                 ;103
0000f6  e014              B        |L1.290|
                  |L1.248|
;;;109        /* Initialize MMC Card, send CMD1. */
;;;110        for (i = 0; i < 50000; i++) {
0000f8  2500              MOVS     r5,#0
                  |L1.250|
;;;111          spi_ss (0);
0000fa  2000              MOVS     r0,#0
0000fc  f7fffffe          BL       spi_ss
;;;112          r1 = mmc_command (SEND_OP_COND, 0);
000100  2100              MOVS     r1,#0
000102  2041              MOVS     r0,#0x41
000104  f7fffffe          BL       mmc_command
000108  4606              MOV      r6,r0
;;;113          spi_ss (1);
00010a  2001              MOVS     r0,#1
00010c  f7fffffe          BL       spi_ss
;;;114          if (r1 != 0x01) {
000110  2e01              CMP      r6,#1
000112  d001              BEQ      |L1.280|
;;;115            break;
;;;116          }
;;;117        }
;;;118        if (r1 != 0x00) {
000114  b9fe              CBNZ     r6,|L1.342|
000116  e003              B        |L1.288|
                  |L1.280|
000118  1c6d              ADDS     r5,r5,#1              ;110
00011a  42bd              CMP      r5,r7                 ;110
00011c  d3ed              BCC      |L1.250|
00011e  e01a              B        |L1.342|
                  |L1.288|
;;;119          /* Failed to Initialize the card. */
;;;120          return (__FALSE);
;;;121        }
;;;122        CardType = CARD_MMC;
000120  2001              MOVS     r0,#1
                  |L1.290|
000122  7020              STRB     r0,[r4,#0]            ;103
                  |L1.292|
;;;123      }
;;;124    
;;;125      /* Set block length in the Flash Card to 512 bytes. */
;;;126      spi_ss (0);
000124  2000              MOVS     r0,#0
000126  f7fffffe          BL       spi_ss
;;;127      r1 = mmc_command (SET_BLOCKLEN, 512);
00012a  f44f7100          MOV      r1,#0x200
00012e  2050              MOVS     r0,#0x50
000130  f7fffffe          BL       mmc_command
000134  4604              MOV      r4,r0
;;;128      spi_ss (1);
000136  2001              MOVS     r0,#1
000138  f7fffffe          BL       spi_ss
;;;129      if (r1 != 0x00) {
00013c  b95c              CBNZ     r4,|L1.342|
;;;130        return (__FALSE);
;;;131      }
;;;132      /* Turn Off CRC option. */
;;;133      spi_ss (0);
00013e  2000              MOVS     r0,#0
000140  f7fffffe          BL       spi_ss
;;;134      r1 = mmc_command (CRC_ON_OFF, 0);
000144  2100              MOVS     r1,#0
000146  207b              MOVS     r0,#0x7b
000148  f7fffffe          BL       mmc_command
00014c  4604              MOV      r4,r0
;;;135      spi_ss (1);
00014e  2001              MOVS     r0,#1
000150  f7fffffe          BL       spi_ss
;;;136      if (r1 != 0x00) {
000154  b114              CBZ      r4,|L1.348|
                  |L1.342|
;;;137        return (__FALSE);
000156  2000              MOVS     r0,#0
                  |L1.344|
;;;138      }
;;;139      /* Success, card initialized. */
;;;140      return (__TRUE);
;;;141    }
000158  e8bd81f0          POP      {r4-r8,pc}
                  |L1.348|
00015c  2001              MOVS     r0,#1                 ;140
00015e  e7fb              B        |L1.344|
;;;142    
                          ENDP

                  mmc_read_block PROC
;;;171    
;;;172    static BOOL mmc_read_block (U8 cmd, U32 arg, U8 *buf, U32 cnt) {
000160  e92d41f0          PUSH     {r4-r8,lr}
000164  4615              MOV      r5,r2
000166  461e              MOV      r6,r3
;;;173      /* Read a 'cnt' of data blocks from Flash Card. */
;;;174      U32 i;
;;;175    
;;;176      if (mmc_command (cmd, arg) != 0x00) {
000168  f7fffffe          BL       mmc_command
00016c  b9e0              CBNZ     r0,|L1.424|
00016e  e01d              B        |L1.428|
                  |L1.368|
;;;177        /* R1 status error. */
;;;178        return (__FALSE);
;;;179      }
;;;180    
;;;181      for (  ; cnt; buf += 512, cnt--) {
;;;182        for (i = CMD_TOUT; i; i--) {
000170  463c              MOV      r4,r7
                  |L1.370|
;;;183          if (spi_send (0xFF) == 0xFE) {
000172  20ff              MOVS     r0,#0xff
000174  f7fffffe          BL       spi_send
000178  28fe              CMP      r0,#0xfe
00017a  d002              BEQ      |L1.386|
00017c  1e64              SUBS     r4,r4,#1              ;182
00017e  d1f8              BNE      |L1.370|
000180  e012              B        |L1.424|
                  |L1.386|
;;;184            /* Data Start token. */
;;;185            break;
;;;186          }
;;;187        }
;;;188        if (i == 0) {
000182  b18c              CBZ      r4,|L1.424|
;;;189          /* Sector Read Tiomeout. */
;;;190          return (__FALSE);
;;;191        }
;;;192    
;;;193        for (i = 0; i < 512; i++) {
000184  2400              MOVS     r4,#0
                  |L1.390|
;;;194          buf[i] = spi_send (0xFF);
000186  20ff              MOVS     r0,#0xff
000188  f7fffffe          BL       spi_send
00018c  5528              STRB     r0,[r5,r4]
00018e  1c64              ADDS     r4,r4,#1              ;193
000190  4544              CMP      r4,r8                 ;193
000192  d3f8              BCC      |L1.390|
;;;195        }
;;;196        /* Read also a 16-bit CRC. */
;;;197        spi_send (0xFF);
000194  20ff              MOVS     r0,#0xff
000196  f7fffffe          BL       spi_send
;;;198        spi_send (0xFF);
00019a  20ff              MOVS     r0,#0xff
00019c  f7fffffe          BL       spi_send
0001a0  f5057500          ADD      r5,r5,#0x200          ;181
0001a4  1e76              SUBS     r6,r6,#1              ;181
0001a6  e005              B        |L1.436|
                  |L1.424|
0001a8  2000              MOVS     r0,#0                 ;190
;;;199      }
;;;200      return (__TRUE);
;;;201    }
0001aa  e7d5              B        |L1.344|
                  |L1.428|
0001ac  f64017c4          MOV      r7,#0x9c4             ;182
0001b0  f44f7800          MOV      r8,#0x200             ;193
                  |L1.436|
0001b4  2e00              CMP      r6,#0                 ;181
0001b6  d1db              BNE      |L1.368|
0001b8  2001              MOVS     r0,#1                 ;200
0001ba  e7cd              B        |L1.344|
;;;202    
                          ENDP

                  mmc_read_bytes PROC
;;;205    
;;;206    static BOOL mmc_read_bytes (U8 cmd, U32 arg, U8 *buf, U32 len) {
0001bc  b570              PUSH     {r4-r6,lr}
0001be  4616              MOV      r6,r2
0001c0  461d              MOV      r5,r3
;;;207      /* Read a 'len' bytes from Flash Card. */
;;;208      U32 i;
;;;209    
;;;210      if (mmc_command (cmd, arg) != 0x00) {
0001c2  f7fffffe          BL       mmc_command
0001c6  b960              CBNZ     r0,|L1.482|
;;;211        /* R1 status error. */
;;;212        return (__FALSE);
;;;213      }
;;;214    
;;;215      for (i = CMD_TOUT; i; i--) {
0001c8  f64014c4          MOV      r4,#0x9c4
                  |L1.460|
;;;216        if (spi_send (0xFF) == 0xFE) {
0001cc  20ff              MOVS     r0,#0xff
0001ce  f7fffffe          BL       spi_send
0001d2  28fe              CMP      r0,#0xfe
0001d4  d002              BEQ      |L1.476|
0001d6  1e64              SUBS     r4,r4,#1              ;215
0001d8  d1f8              BNE      |L1.460|
0001da  e002              B        |L1.482|
                  |L1.476|
;;;217          /* Data Start token. */
;;;218          break;
;;;219        }
;;;220      }
;;;221      if (i == 0) {
0001dc  b10c              CBZ      r4,|L1.482|
;;;222        /* Data Read Tiomeout. */
;;;223        return (__FALSE);
;;;224      }
;;;225    
;;;226      for (i = 0; i < len; i++) {
0001de  2400              MOVS     r4,#0
0001e0  e006              B        |L1.496|
                  |L1.482|
0001e2  2000              MOVS     r0,#0                 ;223
;;;227        buf[i] = spi_send (0xFF);
;;;228      }
;;;229      /* Read also a 16-bit CRC. */
;;;230      spi_send (0xFF);
;;;231      spi_send (0xFF);
;;;232      return (__TRUE);
;;;233    }
0001e4  bd70              POP      {r4-r6,pc}
0001e6  bf00              NOP                            ;227
                  |L1.488|
0001e8  f7fffffe          BL       spi_send
0001ec  5530              STRB     r0,[r6,r4]            ;227
0001ee  1c64              ADDS     r4,r4,#1              ;226
                  |L1.496|
0001f0  42ac              CMP      r4,r5                 ;226
0001f2  f04f00ff          MOV      r0,#0xff              ;230
0001f6  d3f7              BCC      |L1.488|
0001f8  f7fffffe          BL       spi_send
0001fc  20ff              MOVS     r0,#0xff              ;231
0001fe  f7fffffe          BL       spi_send
000202  2001              MOVS     r0,#1                 ;232
000204  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP

                  mmc_write_block PROC
;;;237    
;;;238    static BOOL mmc_write_block (U8 cmd, U32 arg, U8 *buf, U32 cnt) {
000206  e92d47f0          PUSH     {r4-r10,lr}
00020a  4616              MOV      r6,r2
00020c  461d              MOV      r5,r3
;;;239      /* Write a 'cnt' of data blocks to Flash Card. */
;;;240      U32 i;
;;;241      U8  tkn;
;;;242    
;;;243      if (mmc_command (cmd, arg) != 0x00) {
00020e  f7fffffe          BL       mmc_command
000212  bb48              CBNZ     r0,|L1.616|
;;;244        /* R1 status error. */
;;;245        return (__FALSE);
;;;246      }
;;;247    
;;;248      /* Select token, for single write or multiple write. */
;;;249      tkn = 0xFE;
000214  f04f08fe          MOV      r8,#0xfe
;;;250      if (cnt > 1) {
000218  2d01              CMP      r5,#1
00021a  d901              BLS      |L1.544|
;;;251        tkn = 0xFC;
00021c  f04f08fc          MOV      r8,#0xfc
                  |L1.544|
;;;252      }
;;;253    
;;;254      for (  ; cnt; buf += 512, cnt--) {
;;;255        /* Send Data Start token. */
;;;256        spi_send (tkn);
;;;257        /* Send data. */
;;;258        for (i = 0; i < 512; i++) {
;;;259          spi_send (buf[i]);
;;;260        }
;;;261        /* Send also a 16-bit CRC. */
;;;262        spi_send (0xFF);
;;;263        spi_send (0xFF);
;;;264        /* Check data response. */
;;;265        if ((spi_send (0xFF) & 0x0F) != 0x05) {
;;;266          return (__FALSE);
;;;267        }
;;;268        /* Wait while Flash Card is busy. */
;;;269        for (i = WR_TOUT; i; i--) {
000220  f8df91b4          LDR      r9,|L1.984|
000224  f44f7700          MOV      r7,#0x200             ;258
                  |L1.552|
000228  b33d              CBZ      r5,|L1.634|
00022a  4640              MOV      r0,r8                 ;256
00022c  f7fffffe          BL       spi_send
000230  2400              MOVS     r4,#0                 ;258
                  |L1.562|
000232  5d30              LDRB     r0,[r6,r4]            ;259
000234  f7fffffe          BL       spi_send
000238  1c64              ADDS     r4,r4,#1              ;258
00023a  42bc              CMP      r4,r7                 ;258
00023c  d3f9              BCC      |L1.562|
00023e  20ff              MOVS     r0,#0xff              ;262
000240  f7fffffe          BL       spi_send
000244  20ff              MOVS     r0,#0xff              ;263
000246  f7fffffe          BL       spi_send
00024a  20ff              MOVS     r0,#0xff              ;265
00024c  f7fffffe          BL       spi_send
000250  f000000f          AND      r0,r0,#0xf            ;265
000254  2805              CMP      r0,#5                 ;265
000256  d10d              BNE      |L1.628|
000258  464c              MOV      r4,r9
                  |L1.602|
;;;270          if (spi_send (0xFF) == 0xFF) {
00025a  20ff              MOVS     r0,#0xff
00025c  f7fffffe          BL       spi_send
000260  28ff              CMP      r0,#0xff
000262  d002              BEQ      |L1.618|
000264  1e64              SUBS     r4,r4,#1              ;269
000266  d1f8              BNE      |L1.602|
                  |L1.616|
000268  e004              B        |L1.628|
                  |L1.618|
;;;271            /* Sector Write finished. */
;;;272            break;
;;;273          }
;;;274        }
;;;275        if (i == 0) {
00026a  b11c              CBZ      r4,|L1.628|
00026c  f5067600          ADD      r6,r6,#0x200          ;254
000270  1e6d              SUBS     r5,r5,#1              ;254
000272  e7d9              B        |L1.552|
                  |L1.628|
;;;276          /* Sector Write Timeout. */
;;;277          return (__FALSE);
000274  2000              MOVS     r0,#0
                  |L1.630|
;;;278        }
;;;279      }
;;;280      return (__TRUE);
;;;281    }
000276  e8bd87f0          POP      {r4-r10,pc}
                  |L1.634|
00027a  2001              MOVS     r0,#1                 ;280
00027c  e7fb              B        |L1.630|
;;;282    
                          ENDP

                  mmc_read_sect PROC
;;;285    
;;;286    BOOL mmc_read_sect (U32 sect, U8 *buf, U32 cnt) {
00027e  b570              PUSH     {r4-r6,lr}
000280  4605              MOV      r5,r0
000282  460e              MOV      r6,r1
000284  4614              MOV      r4,r2
;;;287      /* Read single/multiple sectors from Flash Memory Card. */
;;;288      U32  i;
;;;289      BOOL retv;
;;;290    
;;;291      spi_ss (0);
000286  2000              MOVS     r0,#0
000288  f7fffffe          BL       spi_ss
;;;292      if (cnt > 1) {
;;;293        /* Multiple Block Read. */
;;;294        retv = mmc_read_block (READ_MULT_BLOCK, sect * 512, buf, cnt);
00028c  0269              LSLS     r1,r5,#9
00028e  2c01              CMP      r4,#1                 ;292
000290  d913              BLS      |L1.698|
000292  4623              MOV      r3,r4
000294  4632              MOV      r2,r6
000296  2052              MOVS     r0,#0x52
000298  f7fffffe          BL       mmc_read_block
00029c  4605              MOV      r5,r0
;;;295    
;;;296        mmc_command (STOP_TRAN, 0);
00029e  2100              MOVS     r1,#0
0002a0  204c              MOVS     r0,#0x4c
0002a2  f7fffffe          BL       mmc_command
;;;297        /* Wait while Flash Card is busy. */
;;;298        for (i = STOP_TOUT; i; i--) {
0002a6  4c4d              LDR      r4,|L1.988|
                  |L1.680|
;;;299          if (spi_send (0xFF) == 0xFF) {
0002a8  20ff              MOVS     r0,#0xff
0002aa  f7fffffe          BL       spi_send
0002ae  28ff              CMP      r0,#0xff
0002b0  d009              BEQ      |L1.710|
0002b2  1e64              SUBS     r4,r4,#1              ;298
0002b4  d1f8              BNE      |L1.680|
;;;300            goto x;
;;;301          }
;;;302        }
;;;303        retv = __FALSE;
0002b6  2500              MOVS     r5,#0
0002b8  e005              B        |L1.710|
                  |L1.698|
;;;304      }
;;;305      else {
;;;306        /* Single Block Read. */
;;;307        retv = mmc_read_block (READ_BLOCK, sect * 512, buf, 1);
0002ba  2301              MOVS     r3,#1
0002bc  4632              MOV      r2,r6
0002be  2051              MOVS     r0,#0x51
0002c0  f7fffffe          BL       mmc_read_block
0002c4  4605              MOV      r5,r0
                  |L1.710|
;;;308      }
;;;309    x:spi_ss (1);
0002c6  2001              MOVS     r0,#1
0002c8  f7fffffe          BL       spi_ss
;;;310      return (retv);
0002cc  4628              MOV      r0,r5
;;;311    }
0002ce  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP

                  mmc_write_sect PROC
;;;315    
;;;316    BOOL mmc_write_sect (U32 sect, U8 *buf, U32 cnt) {
0002d0  b570              PUSH     {r4-r6,lr}
0002d2  4605              MOV      r5,r0
0002d4  460e              MOV      r6,r1
0002d6  4614              MOV      r4,r2
;;;317      /* Write a 512 byte sector to Flash Card. */
;;;318      U32  i;
;;;319      BOOL retv;
;;;320    
;;;321      spi_ss (0);
0002d8  2000              MOVS     r0,#0
0002da  f7fffffe          BL       spi_ss
;;;322      if (cnt > 1) {
;;;323        /* Multiple Block Write. */
;;;324        retv = mmc_write_block (WRITE_MULT_BLOCK, sect * 512, buf, cnt);
0002de  0269              LSLS     r1,r5,#9
0002e0  2c01              CMP      r4,#1                 ;322
0002e2  d913              BLS      |L1.780|
0002e4  4623              MOV      r3,r4
0002e6  4632              MOV      r2,r6
0002e8  2059              MOVS     r0,#0x59
0002ea  f7fffffe          BL       mmc_write_block
0002ee  4605              MOV      r5,r0
;;;325    
;;;326        mmc_command (STOP_TRAN, 0);
0002f0  2100              MOVS     r1,#0
0002f2  204c              MOVS     r0,#0x4c
0002f4  f7fffffe          BL       mmc_command
;;;327        /* Wait while Flash Card is busy. */
;;;328        for (i = STOP_TOUT; i; i--) {
0002f8  4c38              LDR      r4,|L1.988|
                  |L1.762|
;;;329          if (spi_send (0xFF) == 0xFF) {
0002fa  20ff              MOVS     r0,#0xff
0002fc  f7fffffe          BL       spi_send
000300  28ff              CMP      r0,#0xff
000302  d009              BEQ      |L1.792|
000304  1e64              SUBS     r4,r4,#1              ;328
000306  d1f8              BNE      |L1.762|
;;;330            goto x;
;;;331          }
;;;332        }
;;;333        retv = __FALSE;
000308  2500              MOVS     r5,#0
00030a  e005              B        |L1.792|
                  |L1.780|
;;;334      }
;;;335      else {
;;;336        /* Single Block Write. */
;;;337        retv = mmc_write_block (WRITE_BLOCK, sect * 512, buf, 1);
00030c  2301              MOVS     r3,#1
00030e  4632              MOV      r2,r6
000310  2058              MOVS     r0,#0x58
000312  f7fffffe          BL       mmc_write_block
000316  4605              MOV      r5,r0
                  |L1.792|
;;;338      }
;;;339    x:spi_ss (1);
000318  2001              MOVS     r0,#1
00031a  f7fffffe          BL       spi_ss
;;;340      return (retv);
00031e  4628              MOV      r0,r5
;;;341    }
000320  bd70              POP      {r4-r6,pc}
;;;342    
                          ENDP

                  mmc_read_config PROC
;;;345    
;;;346    BOOL mmc_read_config (MMCFG *cfg) {
000322  b57f              PUSH     {r0-r6,lr}
000324  4604              MOV      r4,r0
;;;347      /* Read MMC/SD Card device configuration. */
;;;348      U8 buf[16],*bp;
;;;349      BOOL retv;
;;;350      U32 v,m;
;;;351    
;;;352      /* Read the CID - Card Identification. */
;;;353      spi_ss (0);
000326  2000              MOVS     r0,#0
000328  f7fffffe          BL       spi_ss
;;;354      retv = mmc_read_bytes (SEND_CID, 0, buf, 16);
00032c  2310              MOVS     r3,#0x10
00032e  466a              MOV      r2,sp
000330  2100              MOVS     r1,#0
000332  204a              MOVS     r0,#0x4a
000334  f7fffffe          BL       mmc_read_bytes
000338  4605              MOV      r5,r0
;;;355      spi_ss (1);
00033a  2001              MOVS     r0,#1
00033c  f7fffffe          BL       spi_ss
;;;356      if (retv == __FALSE) {
000340  b3f5              CBZ      r5,|L1.960|
;;;357        /* Read CID failed. */
;;;358        return (__FALSE);
;;;359      }
;;;360      /* CID register structure for SD is different than for MMC Card. */
;;;361      if (CardType == CARD_SD) {
000342  4824              LDR      r0,|L1.980|
;;;362        bp = &buf[9];
;;;363      }
;;;364      else {
;;;365        bp = &buf[10];
000344  4669              MOV      r1,sp
000346  7800              LDRB     r0,[r0,#0]            ;361  ; CardType
000348  2802              CMP      r0,#2                 ;361
00034a  d03e              BEQ      |L1.970|
00034c  310a              ADDS     r1,r1,#0xa
                  |L1.846|
;;;366      }
;;;367      cfg->sernum = bp[0]<<24 | bp[1]<<16 | bp[2]<<8 | bp[3];
00034e  6808              LDR      r0,[r1,#0]
000350  78c9              LDRB     r1,[r1,#3]
000352  ba00              REV      r0,r0
000354  f02000ff          BIC      r0,r0,#0xff
000358  4308              ORRS     r0,r0,r1
;;;368    
;;;369      /* Read the CSD - Card Specific Data. */
;;;370      spi_ss (0);
00035a  6020              STR      r0,[r4,#0]
00035c  2000              MOVS     r0,#0
00035e  f7fffffe          BL       spi_ss
;;;371      retv = mmc_read_bytes (SEND_CSD, 0, buf, 16);
000362  2310              MOVS     r3,#0x10
000364  466a              MOV      r2,sp
000366  2100              MOVS     r1,#0
000368  2049              MOVS     r0,#0x49
00036a  f7fffffe          BL       mmc_read_bytes
00036e  4605              MOV      r5,r0
;;;372      spi_ss (1);
000370  2001              MOVS     r0,#1
000372  f7fffffe          BL       spi_ss
;;;373      if (retv == __FALSE) {
000376  b31d              CBZ      r5,|L1.960|
;;;374        /* Read CSD failed. */
;;;375        return (__FALSE);
;;;376      }
;;;377      /* Read Block length */
;;;378      v = buf[5] & 0x0F;
000378  f89d0005          LDRB     r0,[sp,#5]
;;;379      cfg->read_blen = 1 << v;
00037c  2101              MOVS     r1,#1
00037e  f000000f          AND      r0,r0,#0xf            ;378
000382  fa01f000          LSL      r0,r1,r0
000386  8120              STRH     r0,[r4,#8]
;;;380    
;;;381      /* Write Block length */
;;;382      v = ((buf[12] << 8 | buf[13]) >> 6) & 0x0F;
000388  f8bd000c          LDRH     r0,[sp,#0xc]
00038c  ba40              REV16    r0,r0
00038e  f3c01083          UBFX     r0,r0,#6,#4
;;;383      cfg->write_blen = 1 << v;
000392  4081              LSLS     r1,r1,r0
000394  8161              STRH     r1,[r4,#0xa]
;;;384    
;;;385      /* Total Number of blocks */
;;;386      v = ((buf[6] << 16 | buf[7] << 8 | buf[8]) >> 6) & 0x0FFF;
000396  f89d0006          LDRB     r0,[sp,#6]
00039a  f89d1007          LDRB     r1,[sp,#7]
00039e  0400              LSLS     r0,r0,#16
0003a0  ea402001          ORR      r0,r0,r1,LSL #8
0003a4  f89d1008          LDRB     r1,[sp,#8]
0003a8  4308              ORRS     r0,r0,r1
;;;387      m = ((buf[9] << 8  | buf[10]) >> 7) & 0x07;
0003aa  f8bd1009          LDRH     r1,[sp,#9]
0003ae  f3c0108b          UBFX     r0,r0,#6,#12          ;386
0003b2  ba49              REV16    r1,r1
0003b4  f3c111c2          UBFX     r1,r1,#7,#3
;;;388      cfg->blocknr = (v + 1) << (m + 2);
0003b8  1c40              ADDS     r0,r0,#1
0003ba  1c89              ADDS     r1,r1,#2
0003bc  4088              LSLS     r0,r0,r1
;;;389    
;;;390      return (__TRUE);
0003be  e000              B        |L1.962|
                  |L1.960|
0003c0  e005              B        |L1.974|
                  |L1.962|
0003c2  6060              STR      r0,[r4,#4]
0003c4  2001              MOVS     r0,#1
                  |L1.966|
;;;391    }
0003c6  b004              ADD      sp,sp,#0x10
0003c8  bd70              POP      {r4-r6,pc}
                  |L1.970|
0003ca  3109              ADDS     r1,r1,#9              ;362
0003cc  e7bf              B        |L1.846|
                  |L1.974|
0003ce  2000              MOVS     r0,#0                 ;375
0003d0  e7f9              B        |L1.966|
;;;392    
                          ENDP

0003d2  0000              DCW      0x0000
                  |L1.980|
                          DCD      ||.data||
                  |L1.984|
                          DCD      0x0007a120
                  |L1.988|
                          DCD      0x0001e848

                          AREA ||.data||, DATA, ALIGN=0

                  CardType
000000  00                DCB      0x00
