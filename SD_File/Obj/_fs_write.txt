; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_write.o --depend=.\Obj\_fs_write.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_write.crf FlashFS\_fs_write.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  __write PROC
;;;15     
;;;16     int __write (int handle, const U8 *buf, U32 len) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;17       /* Low level file write function. */
;;;18       FALLOC alloc;
;;;19       IOB *fcb;
;;;20       BOOL wralloc;
;;;21       U32 size;
;;;22     
;;;23       START_LOCK (int);
00000a  483b              LDR      r0,|L1.248|
00000c  f7fffffe          BL       _mutex_acquire
;;;24     
;;;25       if (buf == NULL) {
;;;26         /* Invalid buffer, return error. */
;;;27         RETURN (-1);
000010  f04f39ff          MOV      r9,#0xffffffff
000014  b3f7              CBZ      r7,|L1.148|
;;;28       }
;;;29       fcb = &_iob[handle];
000016  eb040084          ADD      r0,r4,r4,LSL #2
00001a  4938              LDR      r1,|L1.252|
00001c  eb0000c4          ADD      r0,r0,r4,LSL #3
000020  eb010480          ADD      r4,r1,r0,LSL #2
;;;30     
;;;31       if (fcb->drive == DRV_MCARD) {
000024  7920              LDRB     r0,[r4,#4]
000026  2804              CMP      r0,#4
000028  d006              BEQ      |L1.56|
;;;32         /* Write data to Flash Memory Card. */
;;;33         if (fat_write (fcb, buf, len) == __FALSE) {
;;;34           /* Error, data not written to file. */
;;;35           RETURN (-1);
;;;36         }
;;;37         RETURN (0);
;;;38       }
;;;39     
;;;40       wralloc = __FALSE;
00002a  f04f0800          MOV      r8,#0
;;;41       if (len & 3) {
00002e  07b0              LSLS     r0,r6,#30
000030  d025              BEQ      |L1.126|
;;;42         wralloc = __TRUE;
000032  f04f0801          MOV      r8,#1
000036  e022              B        |L1.126|
                  |L1.56|
000038  4632              MOV      r2,r6                 ;33
00003a  4639              MOV      r1,r7                 ;33
00003c  4620              MOV      r0,r4                 ;33
00003e  f7fffffe          BL       fat_write
000042  b338              CBZ      r0,|L1.148|
000044  e051              B        |L1.234|
000046  bf00              NOP                            ;33
                  |L1.72|
000048  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;33
;;;43       }
;;;44       while (len) {
;;;45         size = fcb->_ftop - fcb->_fbot - sizeof (FALLOC);
00004c  1a0d              SUBS     r5,r1,r0
00004e  3d08              SUBS     r5,r5,#8
;;;46         if (size > len) {
000050  42b5              CMP      r5,r6
000052  d900              BLS      |L1.86|
;;;47           size = len;
000054  4635              MOV      r5,r6
                  |L1.86|
;;;48         }
;;;49         len -= size;
;;;50         fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fcb->_fblock].bStart + fcb->_fbot,
000056  8a22              LDRH     r2,[r4,#0x10]
000058  68e1              LDR      r1,[r4,#0xc]
00005a  1b76              SUBS     r6,r6,r5              ;49
00005c  4623              MOV      r3,r4
00005e  f8511032          LDR      r1,[r1,r2,LSL #3]
000062  462a              MOV      r2,r5
000064  4408              ADD      r0,r0,r1
000066  4639              MOV      r1,r7
000068  f7fffffe          BL       fs_WriteBlock
;;;51                        (void *)buf, size, fcb);
;;;52         buf += size;
;;;53         fcb->_fbot += size;
00006c  6960              LDR      r0,[r4,#0x14]
00006e  442f              ADD      r7,r7,r5              ;52
000070  4428              ADD      r0,r0,r5
;;;54     
;;;55         if (fs_BlockFull (fcb) == __TRUE) {
000072  6160              STR      r0,[r4,#0x14]
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       fs_BlockFull
00007a  2801              CMP      r0,#1
00007c  d028              BEQ      |L1.208|
                  |L1.126|
00007e  2e00              CMP      r6,#0                 ;44
000080  d1e2              BNE      |L1.72|
;;;56           /* Current Flash Block is full, allocate next one */
;;;57           if (fs_AllocBlock (fcb) == __FALSE) {
;;;58             RETURN (-1);
;;;59           }
;;;60           /* Do not write alloc record for empty segment. */
;;;61           if (len == 0) {
;;;62             goto ex;
;;;63           }
;;;64         }
;;;65       }
;;;66       if (wralloc == __FALSE) {
000082  f1b80f00          CMP      r8,#0
000086  d02c              BEQ      |L1.226|
;;;67         /* Set flag 'Write Allocation Requested'. */
;;;68         fcb->flags |= _IOWALLOC;
;;;69       }
;;;70       else {
;;;71         /* If buffer is not full, write also allocation record. */
;;;72         alloc.end    = fcb->_fbot;
000088  6960              LDR      r0,[r4,#0x14]
;;;73         alloc.fileID = fcb->fileID;
00008a  9000              STR      r0,[sp,#0]
00008c  8820              LDRH     r0,[r4,#0]
00008e  f8ad0004          STRH     r0,[sp,#4]
;;;74         alloc.index  = fcb->_fidx++;
000092  e000              B        |L1.150|
                  |L1.148|
000094  e023              B        |L1.222|
                  |L1.150|
000096  8a60              LDRH     r0,[r4,#0x12]
000098  f8ad0006          STRH     r0,[sp,#6]
00009c  8a60              LDRH     r0,[r4,#0x12]
;;;75         fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fcb->_fblock].bStart + fcb->_ftop,
00009e  4623              MOV      r3,r4
0000a0  1c40              ADDS     r0,r0,#1              ;74
0000a2  8260              STRH     r0,[r4,#0x12]         ;74
0000a4  8a21              LDRH     r1,[r4,#0x10]
0000a6  68e0              LDR      r0,[r4,#0xc]
0000a8  2208              MOVS     r2,#8
0000aa  f8500031          LDR      r0,[r0,r1,LSL #3]
0000ae  69a1              LDR      r1,[r4,#0x18]
0000b0  4408              ADD      r0,r0,r1
0000b2  4669              MOV      r1,sp
0000b4  f7fffffe          BL       fs_WriteBlock
;;;76                        &alloc, sizeof (FALLOC), fcb);
;;;77         /* Always write on 4-byte boundaries. */
;;;78         fcb->_ftop -= sizeof (FALLOC);
0000b8  69a0              LDR      r0,[r4,#0x18]
0000ba  3808              SUBS     r0,r0,#8
;;;79         fcb->_fbot = (fcb->_fbot + 3) & ~3;
0000bc  61a0              STR      r0,[r4,#0x18]
0000be  6960              LDR      r0,[r4,#0x14]
0000c0  1cc0              ADDS     r0,r0,#3
0000c2  f0200003          BIC      r0,r0,#3
0000c6  6160              STR      r0,[r4,#0x14]
                  |L1.200|
;;;80     ex: fcb->flags &= ~_IOWALLOC;
0000c8  8860              LDRH     r0,[r4,#2]
0000ca  f0200020          BIC      r0,r0,#0x20
0000ce  e00b              B        |L1.232|
                  |L1.208|
0000d0  4620              MOV      r0,r4                 ;57
0000d2  f7fffffe          BL       fs_AllocBlock
0000d6  b110              CBZ      r0,|L1.222|
0000d8  2e00              CMP      r6,#0                 ;61
0000da  d1b5              BNE      |L1.72|
0000dc  e7f4              B        |L1.200|
                  |L1.222|
0000de  464c              MOV      r4,r9                 ;58
0000e0  e004              B        |L1.236|
                  |L1.226|
0000e2  8860              LDRH     r0,[r4,#2]            ;68
0000e4  f0400020          ORR      r0,r0,#0x20           ;68
                  |L1.232|
0000e8  8060              STRH     r0,[r4,#2]
                  |L1.234|
;;;81       }
;;;82       RETURN (0);
0000ea  2400              MOVS     r4,#0
                  |L1.236|
;;;83     
;;;84       END_LOCK;
0000ec  4802              LDR      r0,|L1.248|
0000ee  f7fffffe          BL       _mutex_release
0000f2  4620              MOV      r0,r4
;;;85     }
0000f4  e8bd87fc          POP      {r2-r10,pc}
;;;86     
                          ENDP

                  |L1.248|
                          DCD      _stream_list_lock
                  |L1.252|
                          DCD      _iob
