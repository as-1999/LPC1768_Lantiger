; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\fs_lib.o --depend=.\Obj\fs_lib.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\fs_lib.crf FlashFS\fs_lib.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  fn_cmp PROC
;;;21     
;;;22     BOOL fn_cmp (const char *sp, const char *fp) {
000000  e004              B        |L1.12|
                  |L1.2|
;;;23       /* Compare flash filename string with provided filename. */
;;;24     
;;;25       for (  ; *sp; sp++, fp++) {
;;;26         if (*sp != *fp) {
000002  780b              LDRB     r3,[r1,#0]
000004  429a              CMP      r2,r3
000006  d106              BNE      |L1.22|
000008  1c40              ADDS     r0,r0,#1              ;25
00000a  1c49              ADDS     r1,r1,#1              ;25
                  |L1.12|
00000c  7802              LDRB     r2,[r0,#0]            ;25
00000e  2a00              CMP      r2,#0                 ;25
000010  d1f7              BNE      |L1.2|
;;;27           return (__FALSE);
;;;28         }
;;;29       }
;;;30       if (*fp != 0) {
000012  7808              LDRB     r0,[r1,#0]
000014  b108              CBZ      r0,|L1.26|
                  |L1.22|
;;;31         return (__FALSE);
000016  2000              MOVS     r0,#0
;;;32       }
;;;33       return (__TRUE);
;;;34     }
000018  4770              BX       lr
                  |L1.26|
00001a  2001              MOVS     r0,#1                 ;33
00001c  4770              BX       lr
;;;35     
                          ENDP

                  fs_strpos PROC
;;;38     
;;;39     int fs_strpos (const char *sp, const char ch) {
00001e  2200              MOVS     r2,#0
;;;40       /* Find a position of 'ch' in a string */
;;;41       int i;
;;;42     
;;;43       for (i = 0; *sp; sp++, i++) {
000020  e005              B        |L1.46|
                  |L1.34|
;;;44         if (*sp == ch) {
000022  428b              CMP      r3,r1
000024  d101              BNE      |L1.42|
;;;45           return (i);
000026  4610              MOV      r0,r2
;;;46         }
;;;47       }
;;;48       return (-1);
;;;49     }
000028  4770              BX       lr
                  |L1.42|
00002a  1c40              ADDS     r0,r0,#1              ;43
00002c  1c52              ADDS     r2,r2,#1              ;43
                  |L1.46|
00002e  7803              LDRB     r3,[r0,#0]            ;43
000030  2b00              CMP      r3,#0                 ;43
000032  d1f6              BNE      |L1.34|
000034  1e58              SUBS     r0,r3,#1              ;48
000036  4770              BX       lr
;;;50     
                          ENDP

                  fs_ReadData PROC
;;;53     
;;;54     int fs_ReadData (U32 adr, U32 cnt, U8 *buf)  {
000038  4603              MOV      r3,r0
00003a  4610              MOV      r0,r2
00003c  b510              PUSH     {r4,lr}
;;;55       /* Read Data from RAM memory to buffer. */
;;;56     
;;;57       memcpy (buf, (void *)adr, cnt);
00003e  460a              MOV      r2,r1
000040  4619              MOV      r1,r3
000042  f7fffffe          BL       __aeabi_memcpy
;;;58       return (0);
000046  2000              MOVS     r0,#0
;;;59     }
000048  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  fs_WriteData PROC
;;;63     
;;;64     int fs_WriteData (U32 adr, U32 cnt, U8 *buf)  {
00004a  460b              MOV      r3,r1
00004c  b510              PUSH     {r4,lr}
00004e  4611              MOV      r1,r2
;;;65       /* Write Data from buffer to RAM memory. */
;;;66     
;;;67       memcpy ((void *)adr, buf, cnt);
000050  461a              MOV      r2,r3
000052  f7fffffe          BL       __aeabi_memcpy
;;;68       return (0);
000056  2000              MOVS     r0,#0
;;;69     }
000058  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  fs_get_drive PROC
;;;73     
;;;74     int fs_get_drive (const char *fn) {
00005a  7841              LDRB     r1,[r0,#1]
;;;75       /* Check if drive letter provided. */
;;;76     
;;;77       if (*(fn+1) != ':') {
00005c  293a              CMP      r1,#0x3a
00005e  d112              BNE      |L1.134|
;;;78         return (DRV_NONE);
;;;79       }
;;;80       switch (*fn) {
000060  7800              LDRB     r0,[r0,#0]
000062  2866              CMP      r0,#0x66
000064  d011              BEQ      |L1.138|
000066  dc08              BGT      |L1.122|
000068  2846              CMP      r0,#0x46
00006a  d00e              BEQ      |L1.138|
00006c  284d              CMP      r0,#0x4d
00006e  d012              BEQ      |L1.150|
000070  2852              CMP      r0,#0x52
000072  d00e              BEQ      |L1.146|
000074  2853              CMP      r0,#0x53
000076  d106              BNE      |L1.134|
000078  e009              B        |L1.142|
                  |L1.122|
00007a  286d              CMP      r0,#0x6d
00007c  d00b              BEQ      |L1.150|
00007e  2872              CMP      r0,#0x72
000080  d007              BEQ      |L1.146|
000082  2873              CMP      r0,#0x73
000084  d003              BEQ      |L1.142|
                  |L1.134|
;;;81         /* 'F:' - Flash device */
;;;82         case 'F':
;;;83         case 'f':
;;;84           return (DRV_FLASH);
;;;85         /* 'S:' - SPI Flash device. */
;;;86         case 'S':
;;;87         case 's':
;;;88           return (DRV_SPI);
;;;89         /* 'R:' - RAM device */
;;;90         case 'R':
;;;91         case 'r':
;;;92           return (DRV_RAM);
;;;93         /* 'M:' - SD Card device. */
;;;94         case 'M':
;;;95         case 'm':
;;;96           return (DRV_MCARD);
;;;97       }
;;;98       return (DRV_NONE);
000086  2000              MOVS     r0,#0
;;;99     }
000088  4770              BX       lr
                  |L1.138|
00008a  2001              MOVS     r0,#1                 ;84
00008c  4770              BX       lr
                  |L1.142|
00008e  2002              MOVS     r0,#2                 ;88
000090  4770              BX       lr
                  |L1.146|
000092  2003              MOVS     r0,#3                 ;92
000094  4770              BX       lr
                  |L1.150|
000096  2004              MOVS     r0,#4                 ;96
000098  4770              BX       lr
;;;100    
                          ENDP

                  fs_find_iob PROC
;;;103    
;;;104    int fs_find_iob (void) {
00009a  b510              PUSH     {r4,lr}
;;;105      /* Find unused _iob[] structure. */
;;;106      IOB *fcb;
;;;107      U32 i,nfile = _NFILE;
00009c  481b              LDR      r0,|L1.268|
;;;108    
;;;109      for (i = 0, fcb = &_iob[0]; i < nfile; fcb++, i++) {
00009e  2400              MOVS     r4,#0
0000a0  8801              LDRH     r1,[r0,#0]            ;107  ; _NFILE
0000a2  481b              LDR      r0,|L1.272|
0000a4  e004              B        |L1.176|
                  |L1.166|
;;;110        if (!(fcb->flags & (_IOREAD|_IOWRT))) {
0000a6  8842              LDRH     r2,[r0,#2]
0000a8  0792              LSLS     r2,r2,#30
0000aa  d006              BEQ      |L1.186|
0000ac  3034              ADDS     r0,r0,#0x34           ;109
0000ae  1c64              ADDS     r4,r4,#1              ;109
                  |L1.176|
0000b0  428c              CMP      r4,r1                 ;109
0000b2  d3f8              BCC      |L1.166|
;;;111          /* Clear File Control Block, return '_iob' index. */
;;;112          memset (fcb, 0, sizeof (struct iob));
;;;113          return (i);
;;;114        }
;;;115      }
;;;116      return (EOF);
0000b4  f04f30ff          MOV      r0,#0xffffffff
;;;117    }
0000b8  bd10              POP      {r4,pc}
                  |L1.186|
0000ba  2134              MOVS     r1,#0x34              ;112
0000bc  f7fffffe          BL       __aeabi_memclr4
0000c0  4620              MOV      r0,r4                 ;113
0000c2  bd10              POP      {r4,pc}
;;;118    
                          ENDP

                  fs_set_params PROC
;;;121    
;;;122    BOOL fs_set_params (IOB *fcb) {
0000c4  7901              LDRB     r1,[r0,#4]
;;;123      /* Set Flash/Ram drive Device parameters. */
;;;124    
;;;125      switch (fcb->drive) {
0000c6  2901              CMP      r1,#1
0000c8  d005              BEQ      |L1.214|
0000ca  2902              CMP      r1,#2
0000cc  d009              BEQ      |L1.226|
0000ce  2903              CMP      r1,#3
0000d0  d014              BEQ      |L1.252|
;;;126        case DRV_FLASH:
;;;127          fcb->DevCfg  = (DEVCONF *)&FlashDev[0];
;;;128          fcb->InitVal = _BlockFREE;
;;;129          fcb->NumSect = _FlashNumSect;
;;;130          break;
;;;131        case DRV_SPI:
;;;132          fcb->DevCfg  = (DEVCONF *)&SpiDev[0];
;;;133          fcb->InitVal = _SpiBlFREE;
;;;134          fcb->NumSect = _SpiNumSect;
;;;135          break;
;;;136        case DRV_RAM:
;;;137          fcb->DevCfg  = (DEVCONF *)&RamDev[0];
;;;138          fcb->InitVal = 0x00000000;
;;;139          fcb->NumSect = _RamNumSect;
;;;140          break;
;;;141        default:
;;;142          return (__FALSE);
0000d2  2000              MOVS     r0,#0
                  |L1.212|
;;;143      }
;;;144      if (fcb->NumSect == 0) {
;;;145        /* This device disabled from the configuration. */
;;;146        return (__FALSE);
;;;147      }
;;;148      return (__TRUE);
;;;149    }
0000d4  4770              BX       lr
                  |L1.214|
0000d6  490f              LDR      r1,|L1.276|
0000d8  60c1              STR      r1,[r0,#0xc]          ;128
0000da  490f              LDR      r1,|L1.280|
0000dc  4a0f              LDR      r2,|L1.284|
0000de  6809              LDR      r1,[r1,#0]            ;128  ; _BlockFREE
0000e0  e004              B        |L1.236|
                  |L1.226|
0000e2  490f              LDR      r1,|L1.288|
0000e4  60c1              STR      r1,[r0,#0xc]          ;133
0000e6  490f              LDR      r1,|L1.292|
0000e8  4a0f              LDR      r2,|L1.296|
0000ea  6809              LDR      r1,[r1,#0]            ;133  ; _SpiBlFREE
                  |L1.236|
0000ec  6081              STR      r1,[r0,#8]            ;129
0000ee  8811              LDRH     r1,[r2,#0]            ;129  ; _FlashNumSect
                  |L1.240|
0000f0  80c1              STRH     r1,[r0,#6]            ;129
0000f2  0408              LSLS     r0,r1,#16             ;144
0000f4  0c00              LSRS     r0,r0,#16             ;144
0000f6  d0ed              BEQ      |L1.212|
0000f8  2001              MOVS     r0,#1                 ;148
0000fa  4770              BX       lr
                  |L1.252|
0000fc  490b              LDR      r1,|L1.300|
0000fe  60c1              STR      r1,[r0,#0xc]          ;138
000100  2100              MOVS     r1,#0                 ;138
000102  6081              STR      r1,[r0,#8]            ;139
000104  490a              LDR      r1,|L1.304|
000106  8809              LDRH     r1,[r1,#0]            ;139  ; _RamNumSect
000108  e7f2              B        |L1.240|
;;;150    
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      _NFILE
                  |L1.272|
                          DCD      _iob
                  |L1.276|
                          DCD      FlashDev
                  |L1.280|
                          DCD      _BlockFREE
                  |L1.284|
                          DCD      _FlashNumSect
                  |L1.288|
                          DCD      SpiDev
                  |L1.292|
                          DCD      _SpiBlFREE
                  |L1.296|
                          DCD      _SpiNumSect
                  |L1.300|
                          DCD      RamDev
                  |L1.304|
                          DCD      _RamNumSect
