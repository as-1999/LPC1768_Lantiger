; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\fs_ffree.o --depend=.\Obj\fs_ffree.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\fs_ffree.crf FlashFS\fs_ffree.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ffree PROC
;;;15     
;;;16     U64 ffree (const char *drive) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;17       /* Find a free space in the Flash File System. */
;;;18       IOB *fcb;
;;;19       int handle;
;;;20       U32 bl, free = 0;
000004  2600              MOVS     r6,#0
;;;21     
;;;22       START_LOCK (U32);
000006  481e              LDR      r0,|L1.128|
000008  f7fffffe          BL       _mutex_acquire
;;;23     
;;;24       /* Find an unused _iob structure. */
;;;25       if ((handle = fs_find_iob ()) == EOF) {
00000c  f7fffffe          BL       fs_find_iob
000010  1c41              ADDS     r1,r0,#1
000012  d022              BEQ      |L1.90|
;;;26         RETURN (0);
;;;27       }
;;;28       fcb = &_iob[handle];
000014  eb000180          ADD      r1,r0,r0,LSL #2
000018  eb0100c0          ADD      r0,r1,r0,LSL #3
00001c  4919              LDR      r1,|L1.132|
00001e  eb010480          ADD      r4,r1,r0,LSL #2
;;;29       /* Get the drive index. */
;;;30       fcb->drive = fs_get_drive (drive);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       fs_get_drive
000028  f01000ff          ANDS     r0,r0,#0xff
00002c  7120              STRB     r0,[r4,#4]
;;;31       if (fcb->drive == DRV_NONE && *drive == 0) {
00002e  d107              BNE      |L1.64|
000030  7828              LDRB     r0,[r5,#0]
000032  b990              CBNZ     r0,|L1.90|
;;;32         /* Empty string provided for a drive name. */
;;;33         fcb->drive = _DEF_DRIVE;
000034  4814              LDR      r0,|L1.136|
000036  8800              LDRH     r0,[r0,#0]  ; _DEF_DRIVE
000038  f01000ff          ANDS     r0,r0,#0xff
00003c  7120              STRB     r0,[r4,#4]
;;;34       }
;;;35       if (fcb->drive == DRV_NONE) {
00003e  d00c              BEQ      |L1.90|
                  |L1.64|
;;;36         /* Invalid drive letter specified. */
;;;37         RETURN (0);
;;;38       }
;;;39       if (fcb->drive == DRV_MCARD) {
000040  b2c0              UXTB     r0,r0
000042  2804              CMP      r0,#4
000044  d005              BEQ      |L1.82|
;;;40         /* Calculate Free Memory for a Flash Card. */
;;;41         free = fat_free ();
;;;42         RETURN (free);
;;;43       }
;;;44       /* Set drive parameters. */
;;;45       if (fs_set_params (fcb) == __FALSE) {
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       fs_set_params
00004c  b128              CBZ      r0,|L1.90|
;;;46         RETURN (0);
;;;47       }
;;;48     
;;;49       for (bl = 0; bl < fcb->NumSect; bl++) {
00004e  2500              MOVS     r5,#0
000050  e00b              B        |L1.106|
                  |L1.82|
000052  f7fffffe          BL       fat_free
000056  4604              MOV      r4,r0                 ;42
000058  e00b              B        |L1.114|
                  |L1.90|
00005a  2400              MOVS     r4,#0                 ;46
00005c  e009              B        |L1.114|
                  |L1.94|
;;;50         /* Search all File Blocks for free space. */
;;;51         free += fs_get_freeMem (bl, fcb);
00005e  4621              MOV      r1,r4
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       fs_get_freeMem
000066  4406              ADD      r6,r6,r0
000068  1c6d              ADDS     r5,r5,#1              ;49
                  |L1.106|
00006a  88e0              LDRH     r0,[r4,#6]            ;49
00006c  42a8              CMP      r0,r5                 ;49
00006e  d8f6              BHI      |L1.94|
;;;52       }
;;;53       RETURN (free);
000070  4634              MOV      r4,r6
                  |L1.114|
;;;54     
;;;55       END_LOCK;
000072  4803              LDR      r0,|L1.128|
000074  f7fffffe          BL       _mutex_release
000078  4620              MOV      r0,r4
00007a  2100              MOVS     r1,#0
;;;56     }
00007c  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      _stream_list_lock
                  |L1.132|
                          DCD      _iob
                  |L1.136|
                          DCD      _DEF_DRIVE
