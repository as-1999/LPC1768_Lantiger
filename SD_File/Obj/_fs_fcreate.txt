; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_fcreate.o --depend=.\Obj\_fs_fcreate.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_fcreate.crf FlashFS\_fs_fcreate.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _fcreate PROC
;;;18     
;;;19     int _fcreate (const char *fname, IOB *fcb) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;20       /* Low level file create function. This function creates a file */
;;;21       /* with name 'fname' for writing in the Flash File System.      */
;;;22       FALLOC fa;
;;;23       U32 i,bl,adr;
;;;24       U8  fn[32];
;;;25     
;;;26       bl = 0;
000002  2600              MOVS     r6,#0
000004  b08b              SUB      sp,sp,#0x2c           ;19
000006  4607              MOV      r7,r0                 ;19
000008  460c              MOV      r4,r1                 ;19
;;;27       for (i = 0; i < fcb->NumSect; i++) {
00000a  4635              MOV      r5,r6
00000c  e02e              B        |L1.108|
                  |L1.14|
;;;28         adr = fs_adr_sig (i, fcb);
00000e  4621              MOV      r1,r4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       fs_adr_sig
;;;29         adr = fs_rd_sig (adr, &fa.end);
000016  4669              MOV      r1,sp
000018  f7fffffe          BL       fs_rd_sig
;;;30         if ((fa.end ^ BlockUSED) == fcb->InitVal) {
00001c  9800              LDR      r0,[sp,#0]
00001e  f080010f          EOR      r1,r0,#0xf
000022  68a0              LDR      r0,[r4,#8]
000024  4281              CMP      r1,r0
000026  d11b              BNE      |L1.96|
;;;31           /* Check if a file already opened for writing in this Block */
;;;32           if (fs_check_fwopen (i, fcb) == __TRUE) {
000028  4621              MOV      r1,r4
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       fs_check_fwopen
000030  2801              CMP      r0,#1
000032  d01a              BEQ      |L1.106|
;;;33             continue;
;;;34           } 
;;;35           /* Try already used Flash Block and check for free space */
;;;36           if (fs_get_freeMem (i, fcb) == 0) {
000034  4621              MOV      r1,r4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       fs_get_freeMem
00003c  b108              CBZ      r0,|L1.66|
;;;37             fa.end = fcb->InitVal ^ BlockFULL;
;;;38             fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[i].bEnd, &fa.end, 4, fcb);
;;;39             continue;
;;;40           }
;;;41           bl = i + 1;
00003e  1c6e              ADDS     r6,r5,#1
;;;42           break;
000040  e017              B        |L1.114|
                  |L1.66|
000042  68a0              LDR      r0,[r4,#8]            ;37
000044  2104              MOVS     r1,#4                 ;38
000046  f08000ff          EOR      r0,r0,#0xff           ;37
00004a  9000              STR      r0,[sp,#0]            ;38
00004c  68e0              LDR      r0,[r4,#0xc]          ;38
00004e  eb0101c5          ADD      r1,r1,r5,LSL #3       ;38
000052  4623              MOV      r3,r4                 ;38
000054  5840              LDR      r0,[r0,r1]            ;38
000056  2204              MOVS     r2,#4                 ;38
000058  4669              MOV      r1,sp                 ;38
00005a  f7fffffe          BL       fs_WriteBlock
00005e  e004              B        |L1.106|
                  |L1.96|
;;;43         }
;;;44         if (fa.end == fcb->InitVal) {
000060  9900              LDR      r1,[sp,#0]
000062  4281              CMP      r1,r0
000064  d101              BNE      |L1.106|
;;;45           if (bl == 0) {
000066  b906              CBNZ     r6,|L1.106|
;;;46             bl = i + 1;
000068  1c6e              ADDS     r6,r5,#1
                  |L1.106|
00006a  1c6d              ADDS     r5,r5,#1              ;27
                  |L1.108|
00006c  88e0              LDRH     r0,[r4,#6]            ;27
00006e  42a8              CMP      r0,r5                 ;27
000070  d8cd              BHI      |L1.14|
                  |L1.114|
;;;47           }
;;;48         }
;;;49       } 
;;;50       if (bl == 0) {
000072  b1ee              CBZ      r6,|L1.176|
;;;51         /* No Flash Blocks free. */
;;;52         return (1);
;;;53       }
;;;54       /* Write a filename to empty space in Flash Block */
;;;55       fcb->_fblock = bl - 1;
000074  1e76              SUBS     r6,r6,#1
000076  8226              STRH     r6,[r4,#0x10]
;;;56       fs_mark_freeMem (fcb);
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       fs_mark_freeMem
;;;57     
;;;58       /* Write Block Signature (=usage) value. */
;;;59       adr = fs_adr_sig (fcb->_fblock, fcb);
00007e  8a20              LDRH     r0,[r4,#0x10]
000080  4621              MOV      r1,r4
000082  f7fffffe          BL       fs_adr_sig
000086  4605              MOV      r5,r0
;;;60       fs_rd_sig (adr, &fa.end);
000088  4669              MOV      r1,sp
00008a  f7fffffe          BL       fs_rd_sig
;;;61       if (fa.end == fcb->InitVal) {
00008e  9900              LDR      r1,[sp,#0]
000090  68a0              LDR      r0,[r4,#8]
000092  4281              CMP      r1,r0
000094  d109              BNE      |L1.170|
;;;62         fa.end = fcb->InitVal ^ BlockUSED;
000096  f080000f          EOR      r0,r0,#0xf
;;;63         fs_WriteBlock ((adr & ~1), &fa.end, 4, fcb);
00009a  9000              STR      r0,[sp,#0]
00009c  f0250001          BIC      r0,r5,#1
0000a0  4623              MOV      r3,r4
0000a2  2204              MOVS     r2,#4
0000a4  4669              MOV      r1,sp
0000a6  f7fffffe          BL       fs_WriteBlock
                  |L1.170|
;;;64       }
;;;65     
;;;66       /* 'fname' must be stored 0-terminated */
;;;67       for (i = 0; fname[i] && i < 31; i++) {
0000aa  2000              MOVS     r0,#0
0000ac  a902              ADD      r1,sp,#8              ;24
0000ae  e004              B        |L1.186|
                  |L1.176|
0000b0  2001              MOVS     r0,#1                 ;52
                  |L1.178|
;;;68         fn[i] = fname[i];
;;;69       }
;;;70       fn[i] = 0;
;;;71       i = (i + 4) & ~3;
;;;72     
;;;73       /* Make sure that 'fname' starts 4-byte aligned */
;;;74       fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fcb->_fblock].bStart + fcb->_fbot,
;;;75                      fn, i, fcb);
;;;76       fcb->_fbot += i;
;;;77     
;;;78       /* Not always correct, but 'fname' is 0-terminated anyway. */
;;;79       fa.end    = fcb->_fbot;
;;;80       fa.fileID = fcb->fileID | 0x8000;
;;;81       /* 'index' can be used later for file attributes like ReadOnly etc. */
;;;82       fa.index  = 0;
;;;83       fs_WriteBlock (((DEVCONF *)fcb->DevCfg)[fcb->_fblock].bStart + fcb->_ftop,
;;;84                       &fa, sizeof (FALLOC), fcb);
;;;85       fcb->_ftop -= sizeof (FALLOC);
;;;86       return (0);
;;;87     }
0000b2  b00b              ADD      sp,sp,#0x2c
0000b4  bdf0              POP      {r4-r7,pc}
                  |L1.182|
0000b6  540a              STRB     r2,[r1,r0]            ;68
0000b8  1c40              ADDS     r0,r0,#1              ;67
                  |L1.186|
0000ba  5c3a              LDRB     r2,[r7,r0]            ;67
0000bc  b10a              CBZ      r2,|L1.194|
0000be  281f              CMP      r0,#0x1f              ;67
0000c0  d3f9              BCC      |L1.182|
                  |L1.194|
0000c2  2600              MOVS     r6,#0                 ;70
0000c4  540e              STRB     r6,[r1,r0]            ;70
0000c6  1d00              ADDS     r0,r0,#4              ;71
0000c8  f0200503          BIC      r5,r0,#3              ;71
0000cc  8a21              LDRH     r1,[r4,#0x10]         ;74
0000ce  68e0              LDR      r0,[r4,#0xc]          ;74
0000d0  4623              MOV      r3,r4                 ;74
0000d2  462a              MOV      r2,r5                 ;74
0000d4  f8500031          LDR      r0,[r0,r1,LSL #3]     ;74
0000d8  6961              LDR      r1,[r4,#0x14]         ;74
0000da  4408              ADD      r0,r0,r1              ;74
0000dc  a902              ADD      r1,sp,#8              ;74
0000de  f7fffffe          BL       fs_WriteBlock
0000e2  6960              LDR      r0,[r4,#0x14]         ;76
0000e4  4623              MOV      r3,r4                 ;83
0000e6  4428              ADD      r0,r0,r5              ;76
0000e8  6160              STR      r0,[r4,#0x14]         ;79
0000ea  9000              STR      r0,[sp,#0]            ;80
0000ec  8820              LDRH     r0,[r4,#0]            ;80
0000ee  2208              MOVS     r2,#8                 ;83
0000f0  f4404000          ORR      r0,r0,#0x8000         ;80
0000f4  f8ad0004          STRH     r0,[sp,#4]            ;80
0000f8  f8ad6006          STRH     r6,[sp,#6]            ;82
0000fc  8a21              LDRH     r1,[r4,#0x10]         ;83
0000fe  68e0              LDR      r0,[r4,#0xc]          ;83
000100  f8500031          LDR      r0,[r0,r1,LSL #3]     ;83
000104  69a1              LDR      r1,[r4,#0x18]         ;83
000106  4408              ADD      r0,r0,r1              ;83
000108  4669              MOV      r1,sp                 ;83
00010a  f7fffffe          BL       fs_WriteBlock
00010e  69a0              LDR      r0,[r4,#0x18]         ;85
000110  3808              SUBS     r0,r0,#8              ;85
000112  61a0              STR      r0,[r4,#0x18]         ;86
000114  2000              MOVS     r0,#0                 ;86
000116  e7cc              B        |L1.178|
;;;88     
                          ENDP

