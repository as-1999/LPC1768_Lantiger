; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_fdelete.o --depend=.\Obj\_fs_fdelete.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_fdelete.crf FlashFS\_fs_fdelete.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _fdelete PROC
;;;18     
;;;19     int _fdelete (IOB *fcb) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4604              MOV      r4,r0
;;;20       /* Low level file delete function. */
;;;21       FALLOC fa;
;;;22       U32 i,bl,adr,invalid;
;;;23     
;;;24       invalid = ~fcb->InitVal;
000004  6880              LDR      r0,[r0,#8]
000006  43c0              MVNS     r0,r0
;;;25       bl = fcb->_fblock;
000008  9000              STR      r0,[sp,#0]
00000a  8a25              LDRH     r5,[r4,#0x10]
;;;26       for (i = 0; i < fcb->NumSect; i++) {
00000c  2700              MOVS     r7,#0
00000e  e033              B        |L1.120|
                  |L1.16|
;;;27         /* Search for file blocks identified with identification 'fileID' */
;;;28         adr = fs_adr_sig (bl, fcb);
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       fs_adr_sig
;;;29         adr = fs_rd_sig (adr, &fa.end);
000018  a901              ADD      r1,sp,#4
00001a  f7fffffe          BL       fs_rd_sig
00001e  4606              MOV      r6,r0
;;;30         if (fa.end != fcb->InitVal) {
000020  9801              LDR      r0,[sp,#4]
000022  68a1              LDR      r1,[r4,#8]
000024  4288              CMP      r0,r1
000026  d021              BEQ      |L1.108|
                  |L1.40|
;;;31           do {
;;;32             adr = fs_rd_alloc (adr, &fa);
000028  a901              ADD      r1,sp,#4
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       fs_rd_alloc
000030  4606              MOV      r6,r0
;;;33             if ((fa.fileID & 0x7FFF) == fcb->fileID) {
000032  f8bd0008          LDRH     r0,[sp,#8]
000036  8821              LDRH     r1,[r4,#0]
000038  f3c0000e          UBFX     r0,r0,#0,#15
00003c  4288              CMP      r0,r1
00003e  d107              BNE      |L1.80|
;;;34               /* Clear the fileID & index values */
;;;35               fs_WriteBlock ((adr & ~1) + 12, &invalid, 4, fcb);
000040  f0260001          BIC      r0,r6,#1
000044  300c              ADDS     r0,r0,#0xc
000046  4623              MOV      r3,r4
000048  2204              MOVS     r2,#4
00004a  4669              MOV      r1,sp
00004c  f7fffffe          BL       fs_WriteBlock
                  |L1.80|
;;;36             }
;;;37           } while (fa.end != fcb->InitVal);
000050  9801              LDR      r0,[sp,#4]
000052  68a1              LDR      r1,[r4,#8]
000054  4288              CMP      r0,r1
000056  d1e7              BNE      |L1.40|
;;;38     
;;;39           /* Check if this Flash Block is all invalidated */
;;;40           if (fs_BlockInvalid (bl, fcb) == __TRUE) {
000058  4621              MOV      r1,r4
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       fs_BlockInvalid
000060  2801              CMP      r0,#1
000062  d103              BNE      |L1.108|
;;;41             /* All file blocks stored in this Flash Block are invalid */
;;;42             fs_InitBlock (bl, fcb);
000064  4621              MOV      r1,r4
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       fs_InitBlock
                  |L1.108|
;;;43           }
;;;44         }
;;;45         if (++bl == fcb->NumSect) {
00006c  88e0              LDRH     r0,[r4,#6]
00006e  1c6d              ADDS     r5,r5,#1
000070  4285              CMP      r5,r0
000072  d100              BNE      |L1.118|
;;;46           bl = 0;
000074  2500              MOVS     r5,#0
                  |L1.118|
000076  1c7f              ADDS     r7,r7,#1              ;26
                  |L1.120|
000078  88e0              LDRH     r0,[r4,#6]            ;26
00007a  42b8              CMP      r0,r7                 ;26
00007c  d8c8              BHI      |L1.16|
;;;47         }
;;;48       }
;;;49       return (0);
00007e  2000              MOVS     r0,#0
;;;50     }
000080  bdfe              POP      {r1-r7,pc}
;;;51     
                          ENDP

