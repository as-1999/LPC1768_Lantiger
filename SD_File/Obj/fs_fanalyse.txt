; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\fs_fanalyse.o --depend=.\Obj\fs_fanalyse.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\fs_fanalyse.crf FlashFS\fs_fanalyse.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  fanalyse PROC
;;;15     
;;;16     int fanalyse (const char *drive) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4605              MOV      r5,r0
;;;17       /* Analyse the FlashFS and check for file defragmentation. */
;;;18       DEVCONF *pd;
;;;19       FALLOC fa;
;;;20       IOB *fcb;
;;;21       int handle;
;;;22       U32 total,inval;
;;;23       U32 i,adr,prev;
;;;24     
;;;25       START_LOCK (int);
000006  4831              LDR      r0,|L1.204|
000008  f7fffffe          BL       _mutex_acquire
;;;26     
;;;27       /* Find an unused _iob structure. */
;;;28       if ((handle = fs_find_iob ()) == EOF) {
00000c  f7fffffe          BL       fs_find_iob
000010  1c41              ADDS     r1,r0,#1
000012  d00e              BEQ      |L1.50|
;;;29         RETURN (1);
;;;30       }
;;;31       fcb = &_iob[handle];
000014  eb000180          ADD      r1,r0,r0,LSL #2
000018  eb0100c0          ADD      r0,r1,r0,LSL #3
00001c  492c              LDR      r1,|L1.208|
00001e  eb010480          ADD      r4,r1,r0,LSL #2
;;;32       /* Get the drive index. */
;;;33       fcb->drive = fs_get_drive (drive);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       fs_get_drive
000028  f01000ff          ANDS     r0,r0,#0xff
00002c  7120              STRB     r0,[r4,#4]
;;;34       if (fcb->drive == DRV_NONE && *drive == 0) {
00002e  d002              BEQ      |L1.54|
000030  e006              B        |L1.64|
                  |L1.50|
000032  2401              MOVS     r4,#1                 ;29
000034  e043              B        |L1.190|
                  |L1.54|
000036  7828              LDRB     r0,[r5,#0]
000038  b928              CBNZ     r0,|L1.70|
;;;35         /* Empty string provided for a drive name. */
;;;36         fcb->drive = _DEF_DRIVE;
00003a  4826              LDR      r0,|L1.212|
00003c  8800              LDRH     r0,[r0,#0]  ; _DEF_DRIVE
00003e  7120              STRB     r0,[r4,#4]
                  |L1.64|
;;;37       }
;;;38       if (fcb->drive == DRV_MCARD) {
000040  b2c0              UXTB     r0,r0
000042  2804              CMP      r0,#4
000044  d008              BEQ      |L1.88|
                  |L1.70|
;;;39         /* Memory Card currently not supported. */
;;;40         RETURN (0);
;;;41       }
;;;42       /* Set drive parameters. */
;;;43       if (fs_set_params (fcb) == __FALSE) {
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       fs_set_params
00004c  b120              CBZ      r0,|L1.88|
;;;44         RETURN (0);
;;;45       }
;;;46     
;;;47       /* Calculate the total size of flash device. */
;;;48       total = 0;
00004e  2600              MOVS     r6,#0
;;;49       pd = (DEVCONF *)fcb->DevCfg;
;;;50       for (i = 0; i < fcb->NumSect; i++, pd++) {
000050  4631              MOV      r1,r6
000052  88e2              LDRH     r2,[r4,#6]
000054  68e0              LDR      r0,[r4,#0xc]
000056  e006              B        |L1.102|
                  |L1.88|
000058  2400              MOVS     r4,#0                 ;44
00005a  e030              B        |L1.190|
                  |L1.92|
00005c  e8f05302          LDRD     r5,r3,[r0],#8         ;44
000060  1c49              ADDS     r1,r1,#1
;;;51         total += (pd->bEnd - pd->bStart);
000062  1b5b              SUBS     r3,r3,r5
000064  441e              ADD      r6,r6,r3
                  |L1.102|
000066  428a              CMP      r2,r1                 ;50
000068  d8f8              BHI      |L1.92|
;;;52       }
;;;53     
;;;54       /* Calculate the total size of invalidated blocks. */
;;;55       inval = 0;
00006a  2700              MOVS     r7,#0
;;;56       for (i = 0; i < fcb->NumSect; i++) {
00006c  463d              MOV      r5,r7
00006e  e020              B        |L1.178|
                  |L1.112|
;;;57         /* Search for invalidated file blocks. */
;;;58         adr = fs_adr_sig (i, fcb);
000070  4621              MOV      r1,r4
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       fs_adr_sig
;;;59         adr = fs_rd_sig (adr, &fa.end);
000078  4669              MOV      r1,sp
00007a  f7fffffe          BL       fs_rd_sig
;;;60         if (fa.end != fcb->InitVal) {
00007e  9900              LDR      r1,[sp,#0]
000080  68a2              LDR      r2,[r4,#8]
000082  4291              CMP      r1,r2
000084  d014              BEQ      |L1.176|
;;;61           for (prev = 0; ; prev = fa.end) {
000086  f04f0800          MOV      r8,#0
                  |L1.138|
;;;62             adr = fs_rd_alloc (adr, &fa);
00008a  4669              MOV      r1,sp
00008c  f7fffffe          BL       fs_rd_alloc
;;;63             if (fa.fileID == (U16)(~fcb->InitVal)) {
000090  68a1              LDR      r1,[r4,#8]
000092  f8bd2004          LDRH     r2,[sp,#4]
000096  43cb              MVNS     r3,r1
000098  b29b              UXTH     r3,r3
00009a  429a              CMP      r2,r3
00009c  d103              BNE      |L1.166|
;;;64               /* Add invalidated block size. */
;;;65               inval += (fa.end - prev);
00009e  9b00              LDR      r3,[sp,#0]
0000a0  eba30208          SUB      r2,r3,r8
0000a4  4417              ADD      r7,r7,r2
                  |L1.166|
;;;66             }
;;;67             if (fa.end == fcb->InitVal) break;
0000a6  9a00              LDR      r2,[sp,#0]
0000a8  428a              CMP      r2,r1
0000aa  d001              BEQ      |L1.176|
0000ac  4690              MOV      r8,r2                 ;61
0000ae  e7ec              B        |L1.138|
                  |L1.176|
0000b0  1c6d              ADDS     r5,r5,#1              ;56
                  |L1.178|
0000b2  88e0              LDRH     r0,[r4,#6]            ;56
0000b4  42a8              CMP      r0,r5                 ;56
0000b6  d8db              BHI      |L1.112|
;;;68           }
;;;69         }
;;;70       }
;;;71       total >>= 8;
0000b8  0a30              LSRS     r0,r6,#8
;;;72       /* Return factor range 0..255 */
;;;73       RETURN (inval/total);
0000ba  fbb7f4f0          UDIV     r4,r7,r0
                  |L1.190|
;;;74     
;;;75       END_LOCK;
0000be  4803              LDR      r0,|L1.204|
0000c0  f7fffffe          BL       _mutex_release
0000c4  4620              MOV      r0,r4
;;;76     }
0000c6  e8bd81fc          POP      {r2-r8,pc}
;;;77     
                          ENDP

0000ca  0000              DCW      0x0000
                  |L1.204|
                          DCD      _stream_list_lock
                  |L1.208|
                          DCD      _iob
                  |L1.212|
                          DCD      _DEF_DRIVE
