; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\_fs_getfsize.o --depend=.\Obj\_fs_getfsize.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FlashFS -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\NXP\LPC17xx --omf_browse=.\Obj\_fs_getfsize.crf FlashFS\_fs_getfsize.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  __getfsize PROC
;;;15     
;;;16     U32 __getfsize (IOB *fcb, BOOL set_fidx) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;17       /* Low level get file size function. */
;;;18       FALLOC fa;
;;;19       U32 bl,fidx,adr,prev;
;;;20       U32 i,fsize;
;;;21     
;;;22       START_LOCK (U32);
000008  4827              LDR      r0,|L1.168|
00000a  f7fffffe          BL       _mutex_acquire
;;;23     
;;;24       if (fcb->drive == DRV_MCARD) {
00000e  7920              LDRB     r0,[r4,#4]
000010  2804              CMP      r0,#4
000012  d00a              BEQ      |L1.42|
;;;25         /* This info is available for Flash Card. */
;;;26         RETURN (fcb->fsize);
;;;27       }
;;;28       if ((fcb->flags & _IOAPPEND) && (set_fidx == __FALSE)) {
000014  8860              LDRH     r0,[r4,#2]
000016  0740              LSLS     r0,r0,#29
000018  d502              BPL      |L1.32|
00001a  f1ba0f00          CMP      r10,#0
00001e  d004              BEQ      |L1.42|
                  |L1.32|
;;;29         /* Size info already set in '__fopen()'. */
;;;30         RETURN (fcb->fsize);
;;;31       }
;;;32       fidx = 0;
000020  2500              MOVS     r5,#0
;;;33       fsize = 0;
;;;34       bl = fcb->_fblock;
000022  8a26              LDRH     r6,[r4,#0x10]
000024  46a9              MOV      r9,r5                 ;33
                  |L1.38|
;;;35     nextbl:
;;;36       for (i = 0; i < fcb->NumSect; i++) {
000026  2700              MOVS     r7,#0
000028  e02f              B        |L1.138|
                  |L1.42|
00002a  6ae4              LDR      r4,[r4,#0x2c]         ;30
00002c  e035              B        |L1.154|
                  |L1.46|
;;;37         /* Search for file blocks identified with identification 'fileID' */
;;;38         adr = fs_adr_sig (bl, fcb);
00002e  4621              MOV      r1,r4
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       fs_adr_sig
;;;39         adr = fs_rd_sig (adr, &fa.end);
000036  4669              MOV      r1,sp
000038  f7fffffe          BL       fs_rd_sig
;;;40         if (fa.end != fcb->InitVal) {
00003c  9900              LDR      r1,[sp,#0]
00003e  68a2              LDR      r2,[r4,#8]
000040  4291              CMP      r1,r2
000042  d01c              BEQ      |L1.126|
;;;41           for (prev = 0; ; prev = fa.end) {
000044  2100              MOVS     r1,#0
000046  e010              B        |L1.106|
                  |L1.72|
;;;42             adr = fs_rd_alloc (adr, &fa);
;;;43             if (fa.fileID == fcb->fileID  &&  fa.index == fidx) {
000048  f8bd1006          LDRH     r1,[sp,#6]
00004c  42a9              CMP      r1,r5
00004e  d108              BNE      |L1.98|
;;;44               /* All file blocks are 4-byte aligned. */
;;;45               fsize += (fa.end - ((prev + 3) & ~3));
000050  f1080003          ADD      r0,r8,#3
000054  9900              LDR      r1,[sp,#0]
000056  f0200003          BIC      r0,r0,#3
00005a  1a09              SUBS     r1,r1,r0
00005c  4489              ADD      r9,r9,r1
;;;46               fidx++;
00005e  1c6d              ADDS     r5,r5,#1
;;;47               goto nextbl;
000060  e7e1              B        |L1.38|
                  |L1.98|
;;;48             }
;;;49             if (fa.end == fcb->InitVal) break;
000062  9900              LDR      r1,[sp,#0]
000064  68a2              LDR      r2,[r4,#8]
000066  4291              CMP      r1,r2
000068  d009              BEQ      |L1.126|
                  |L1.106|
00006a  4688              MOV      r8,r1                 ;41
00006c  4669              MOV      r1,sp                 ;42
00006e  f7fffffe          BL       fs_rd_alloc
000072  f8bd1004          LDRH     r1,[sp,#4]            ;43
000076  8822              LDRH     r2,[r4,#0]            ;43
000078  4291              CMP      r1,r2                 ;43
00007a  d1f2              BNE      |L1.98|
00007c  e7e4              B        |L1.72|
                  |L1.126|
;;;50           }
;;;51         }
;;;52         if (++bl == fcb->NumSect) {
00007e  88e0              LDRH     r0,[r4,#6]
000080  1c76              ADDS     r6,r6,#1
000082  4286              CMP      r6,r0
000084  d100              BNE      |L1.136|
;;;53           bl = 0;
000086  2600              MOVS     r6,#0
                  |L1.136|
000088  1c7f              ADDS     r7,r7,#1              ;36
                  |L1.138|
00008a  88e0              LDRH     r0,[r4,#6]            ;36
00008c  42b8              CMP      r0,r7                 ;36
00008e  d8ce              BHI      |L1.46|
;;;54         }
;;;55       } 
;;;56       /* This File Block does not exist so this must be End Of File */
;;;57       if (set_fidx == __TRUE) {
000090  f1ba0f01          CMP      r10,#1
000094  d100              BNE      |L1.152|
;;;58         fcb->_fidx = fidx;
000096  8265              STRH     r5,[r4,#0x12]
                  |L1.152|
;;;59       }
;;;60       RETURN (fsize);
000098  464c              MOV      r4,r9
                  |L1.154|
;;;61     
;;;62       END_LOCK;
00009a  4803              LDR      r0,|L1.168|
00009c  f7fffffe          BL       _mutex_release
0000a0  4620              MOV      r0,r4
;;;63     }
0000a2  e8bd87fc          POP      {r2-r10,pc}
;;;64     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      _stream_list_lock
